<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>1.3</storyId>
    <title>Current URL Display Panel</title>
    <status>Draft</status>
    <generatedAt>2025-10-13</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/Users/s0mebody/Desktop/dev/projects/website-scraper-project/website-scraper-project/docs/stories/story-1.3.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>a team member</asA>
    <iWant>to see exactly which URL is currently being processed with its processing stage and timing information</iWant>
    <soThat>I can track progress at a granular level and quickly identify any stuck URLs</soThat>
    <tasks>
      <task id="1" goal="Update Job and Result types for current URL tracking">
        <subtask id="1.1">Review packages/shared/src/types/job.ts - verify currentUrl, currentStage, currentUrlStartedAt fields exist</subtask>
        <subtask id="1.2">If missing, add fields to Job interface: currentUrl: string | null, currentStage: ProcessingStage | null, currentUrlStartedAt: string | null</subtask>
        <subtask id="1.3">Verify ProcessingStage type exists: 'fetching' | 'filtering' | 'classifying'</subtask>
        <subtask id="1.4">Update Job Zod schema in packages/shared/src/schemas/job.schema.ts if changes made</subtask>
        <subtask id="1.5">Document backend requirement: NestJS worker must update these fields as URL progresses</subtask>
      </task>
      <task id="2" goal="Create CurrentURLPanel component">
        <subtask id="2.1">Create apps/web/components/current-url-panel.tsx component</subtask>
        <subtask id="2.2">Accept props: job: Job, className?: string</subtask>
        <subtask id="2.3">Display "Currently Processing:" header with current URL</subtask>
        <subtask id="2.4">Implement URL truncation: show first 50 chars + "..." if longer than 60 chars</subtask>
        <subtask id="2.5">Add Radix Tooltip component with full URL on hover</subtask>
        <subtask id="2.6">Display processing stage with stage-specific icons from lucide-react</subtask>
        <subtask id="2.7">Calculate and display elapsed time using currentUrlStartedAt</subtask>
        <subtask id="2.8">Implement empty state: "Waiting to start..." when currentUrl is null</subtask>
        <subtask id="2.9">Use shadcn/ui Card component for panel layout</subtask>
        <subtask id="2.10">Add semantic HTML: section with aria-label="Current URL Processing Status"</subtask>
      </task>
      <task id="3" goal="Create RecentURLsList component">
        <subtask id="3.1">Create apps/web/components/recent-urls-list.tsx component</subtask>
        <subtask id="3.2">Accept props: jobId: string, className?: string</subtask>
        <subtask id="3.3">Fetch last 3 completed results using useJobResults(jobId, { limit: 3, orderBy: 'desc' })</subtask>
        <subtask id="3.4">Display each URL with status icon</subtask>
        <subtask id="3.5">Truncate URLs to 40 chars for list display</subtask>
        <subtask id="3.6">Add timestamp: "Completed XX seconds ago" using processedAt</subtask>
        <subtask id="3.7">Empty state: "No URLs processed yet" when results empty</subtask>
        <subtask id="3.8">Use shadcn/ui List or custom styled list with proper spacing</subtask>
      </task>
      <task id="4" goal="Create useCurrentURLTimer custom hook">
        <subtask id="4.1">Create apps/web/hooks/use-current-url-timer.ts hook</subtask>
        <subtask id="4.2">Accept parameters: currentUrlStartedAt: string | null</subtask>
        <subtask id="4.3">Implement 1-second interval timer to calculate elapsed seconds</subtask>
        <subtask id="4.4">Return: elapsedSeconds: number</subtask>
        <subtask id="4.5">Use useEffect with setInterval and proper cleanup</subtask>
        <subtask id="4.6">Handle null case: return 0 when currentUrlStartedAt is null</subtask>
        <subtask id="4.7">Calculate elapsed time: Math.floor((Date.now() - new Date(currentUrlStartedAt).getTime()) / 1000)</subtask>
      </task>
      <task id="5" goal="Integrate CurrentURLPanel into job detail page">
        <subtask id="5.1">Open apps/web/components/job-detail-client.tsx for editing</subtask>
        <subtask id="5.2">Import CurrentURLPanel and RecentURLsList components</subtask>
        <subtask id="5.3">Add CurrentURLPanel to page layout below MetricsPanel</subtask>
        <subtask id="5.4">Pass job prop to CurrentURLPanel</subtask>
        <subtask id="5.5">Add RecentURLsList below CurrentURLPanel</subtask>
        <subtask id="5.6">Pass jobId prop to RecentURLsList</subtask>
        <subtask id="5.7">Wrap in responsive grid: stack on mobile, side-by-side on desktop</subtask>
        <subtask id="5.8">Verify real-time updates work (inherited from Story 1.2's useJob subscription)</subtask>
      </task>
      <task id="6" goal="Implement real-time updates for current URL">
        <subtask id="6.1">Verify useJob(id) subscription from Story 1.2 includes currentUrl, currentStage, currentUrlStartedAt fields</subtask>
        <subtask id="6.2">Confirm backend updates these fields in real-time (document as backend requirement if not implemented)</subtask>
        <subtask id="6.3">Verify React Query cache invalidation triggers UI refresh for current URL changes</subtask>
        <subtask id="6.4">Test latency: panel should update within 500ms of database change (NFR001-P2)</subtask>
        <subtask id="6.5">No additional subscriptions needed - reuse existing job subscription</subtask>
      </task>
      <task id="7" goal="Testing and verification">
        <subtask id="7.1">Navigate to job detail page with active job</subtask>
        <subtask id="7.2">Take snapshot to verify CurrentURLPanel renders</subtask>
        <subtask id="7.3">Verify current URL displayed and truncated if needed</subtask>
        <subtask id="7.4">Hover over truncated URL, verify tooltip shows full URL</subtask>
        <subtask id="7.5">Verify processing stage icon matches stage</subtask>
        <subtask id="7.6">Verify timer increments every second</subtask>
        <subtask id="7.7">Update job current_url to new URL</subtask>
        <subtask id="7.8">Verify panel updates within 500ms</subtask>
        <subtask id="7.9">Update job current_stage to different stage</subtask>
        <subtask id="7.10">Verify stage icon changes immediately</subtask>
        <subtask id="7.11">Verify RecentURLsList shows last 3 completed URLs with status icons</subtask>
        <subtask id="7.12">Set job current_url to null (job paused)</subtask>
        <subtask id="7.13">Verify empty state displayed</subtask>
        <subtask id="7.14">Test accessibility: keyboard navigation, ARIA labels, screen reader compatibility</subtask>
      </task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="1">Dedicated panel shows: "Currently Processing: [URL]"</criterion>
    <criterion id="2">Processing stage displayed: "Stage: Fetching | Filtering | Classifying"</criterion>
    <criterion id="3">Stage indicator uses visual icons (spinner, filter icon, AI icon)</criterion>
    <criterion id="4">Time on current URL displayed: "Processing for: XX seconds"</criterion>
    <criterion id="5">Previous 3 URLs shown below current with final status (✓ or ✗)</criterion>
    <criterion id="6">URL truncated if too long with tooltip showing full URL</criterion>
    <criterion id="7">Panel updates immediately when URL changes (&lt;500ms latency)</criterion>
    <criterion id="8">Empty state: "Waiting to start..." when job paused or not started</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="docs/PRD.md" title="Product Requirements Document">
        <section name="FR002: Current URL Display">
          Users shall see exactly which URL is currently being processed, including the site name, URL, current processing stage (fetching, filtering, classifying), and elapsed time for that URL.
        </section>
        <section name="NFR001: Real-Time UI Responsiveness">
          Dashboard updates shall reflect job state changes within 500ms via Supabase Realtime subscriptions.
        </section>
        <section name="UX Design Principles - Radical Transparency">
          Every system action shall be visible to users in real-time. No hidden processes. Users should never wonder "what's happening?" Show current URL being processed, processing stage, decision reasoning, and any errors immediately with clear explanations.
        </section>
      </doc>
      <doc path="docs/tech-spec-epic-1.md" title="Epic 1 Technical Specification">
        <section name="Story 1.3: Current URL Display Panel (lines 352-360)">
          AC1.3.1-AC1.3.8 detailed mapping with implementation guidance for current URL panel, processing stage indicators, timer, recent URLs list, URL truncation with tooltips, real-time updates (&lt;500ms latency), and empty state handling.
        </section>
        <section name="Data Models (lines 90-120)">
          Job TypeScript type with fields: currentUrl, currentStage (ProcessingStage), progressPercentage, processingRate, estimatedTimeRemaining. NOTE: currentUrlStartedAt field missing - needs to be added.
        </section>
        <section name="Real-Time Integration (lines 117-126)">
          Subscribe to jobs table UPDATE events filtered by job ID. Target latency &lt;500ms from database change to UI render. Implement fallback polling (5s interval) if Realtime WebSocket fails.
        </section>
      </doc>
      <doc path="docs/epic-stories.md" title="Epic Stories Breakdown">
        <section name="Story 1.3 (lines 83-101)">
          Current URL Display Panel - 8 acceptance criteria including dedicated panel display, processing stage with icons, elapsed timer, previous 3 URLs with status, URL truncation with tooltips, real-time updates, and empty state. Story Points: 2, Dependencies: Story 1.2.
        </section>
      </doc>
      <doc path="docs/stories/story-1.2.md" title="Story 1.2: Live Progress Tracking">
        <section name="Lessons Learned">
          Real-time subscription patterns working with Supabase. Proper cleanup using channel.unsubscribe() (NOT unsubscribeAll). Fallback polling implemented (5s interval). Custom hooks pattern for timers. Format utilities in packages/shared for reusability.
        </section>
      </doc>
      <doc path="docs/ux-specification.md" title="UX Specification">
        <section name="Radix Tooltip Usage">
          Use @radix-ui/react-tooltip for accessible tooltips. Tooltips must be keyboard accessible with proper ARIA labels. Show full URL on hover for truncated text.
        </section>
        <section name="shadcn/ui Components">
          Use Card for panel layout, Badge for status indicators. Follow WCAG 2.1 AA accessibility standards with proper ARIA labels and semantic HTML.
        </section>
      </doc>
    </docs>
    <code>
      <artifact path="apps/web/hooks/use-jobs.ts" kind="hook" symbol="useJob" lines="54-107">
        <reason>Existing hook that fetches single job with real-time Supabase subscription. Already handles currentUrl and currentStage fields in transformJobFromDB (lines 238-239). Story 1.3 will reuse this subscription - no modifications needed except potentially adding currentUrlStartedAt to transform.</reason>
      </artifact>
      <artifact path="packages/shared/src/types/job.ts" kind="type" symbol="Job" lines="4-25">
        <reason>Job interface definition. Already has currentUrl and currentStage fields (lines 13-14). MISSING: currentUrlStartedAt field needs to be added for elapsed time calculation.</reason>
      </artifact>
      <artifact path="packages/shared/src/types/job.ts" kind="type" symbol="ProcessingStage" lines="2">
        <reason>ProcessingStage type already defined: 'fetching' | 'filtering' | 'classifying'. Can be reused directly for stage icon logic.</reason>
      </artifact>
      <artifact path="apps/web/components/job-detail-client.tsx" kind="component" symbol="JobDetailClient" lines="1-100">
        <reason>Client component for job detail page from Story 1.2. Story 1.3 will integrate CurrentURLPanel and RecentURLsList into this component's layout below MetricsPanel.</reason>
      </artifact>
      <artifact path="apps/web/lib/realtime-service.ts" kind="service" symbol="subscribeToJob" lines="1-50">
        <reason>Realtime subscription service with subscribeToJob() and unsubscribe() functions. Already used by useJob hook - no changes needed for Story 1.3.</reason>
      </artifact>
      <artifact path="apps/web/components/ui/card.tsx" kind="component" symbol="Card" lines="1-50">
        <reason>shadcn/ui Card component for panel layout. Will be used as base for CurrentURLPanel.</reason>
      </artifact>
      <artifact path="packages/shared/src/utils/format.ts" kind="utility" symbol="formatDuration" lines="1-20">
        <reason>Utility function from Story 1.2 that formats seconds to HH:MM:SS. Can potentially be reused for elapsed time display, or Story 1.3 will implement custom timer logic.</reason>
      </artifact>
    </code>
    <dependencies>
      <ecosystem name="npm">
        <package name="@radix-ui/react-tooltip" version="^1.x.x" status="NEEDS_INSTALL">Required for accessible tooltips on truncated URLs. Not currently in package.json - must be installed.</package>
        <package name="@radix-ui/react-progress" version="^1.1.7" status="INSTALLED">Already installed from Story 1.2.</package>
        <package name="lucide-react" version="^0.545.0" status="INSTALLED">Icon library for Loader2 (fetching), Filter (filtering), Brain/Sparkles (classifying), CheckCircle, XCircle, MinusCircle.</package>
        <package name="@supabase/supabase-js" version="^2.75.0" status="INSTALLED">Supabase client for real-time subscriptions.</package>
        <package name="@tanstack/react-query" version="^5.90.2" status="INSTALLED">Server state management.</package>
        <package name="next" version="14.2.15" status="INSTALLED">Next.js 14 with App Router.</package>
        <package name="react" version="^18" status="INSTALLED">React 18.</package>
        <package name="class-variance-authority" version="^0.7.1" status="INSTALLED">CVA for component variants.</package>
        <package name="tailwindcss-animate" version="^1.0.7" status="INSTALLED">Tailwind animations.</package>
      </ecosystem>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint id="1" type="architecture">Next.js 14.2+ with App Router - use Server Components for layout, Client Components for interactivity</constraint>
    <constraint id="2" type="architecture">Monorepo structure - components in apps/web/components/, shared types in packages/shared/src/types/</constraint>
    <constraint id="3" type="ui">shadcn/ui components only - use Card for panel layout, avoid custom UI primitives</constraint>
    <constraint id="4" type="ui">lucide-react icons for all visual indicators - Loader2 (fetching), Filter (filtering), Brain/Sparkles (classifying)</constraint>
    <constraint id="5" type="realtime">Reuse existing useJob() subscription from Story 1.2 - do NOT create new Supabase subscriptions</constraint>
    <constraint id="6" type="realtime">Target latency &lt;500ms from database change to UI render (NFR001-P2)</constraint>
    <constraint id="7" type="realtime">Timer updates locally every 1 second - no backend polling needed for timer</constraint>
    <constraint id="8" type="accessibility">WCAG 2.1 AA compliance - semantic HTML with aria-labels, keyboard navigation, screen reader support</constraint>
    <constraint id="9" type="accessibility">Tooltips must be keyboard accessible using Radix Tooltip with proper ARIA</constraint>
    <constraint id="10" type="accessibility">Stage icons supplemented with text - not icon alone for accessibility</constraint>
    <constraint id="11" type="performance">RecentURLsList query fetches only last 3 results to minimize database load</constraint>
    <constraint id="12" type="testing">Manual testing via Chrome DevTools MCP + Supabase MCP (established pattern from Stories 1.1, 1.2)</constraint>
    <constraint id="13" type="testing">Unit tests for custom hooks (useCurrentURLTimer) with Jest - 100% coverage required</constraint>
    <constraint id="14" type="testing">Component tests deferred for MVP velocity - follow Story 1.1 and 1.2 pattern</constraint>
    <constraint id="15" type="backend">Backend (Epic 2) must update currentUrl, currentStage, currentUrlStartedAt fields - document as dependency</constraint>
  </constraints>

  <interfaces>
    <interface name="Job" kind="type" path="packages/shared/src/types/job.ts">
      <signature>
        interface Job {
          id: string;
          currentUrl: string | null;
          currentStage: ProcessingStage | null;
          currentUrlStartedAt: string | null; // MISSING - needs to be added
          status: JobStatus;
          // ... other fields
        }
      </signature>
      <usage>Main data type for job information. Story 1.3 components will receive Job as prop and access currentUrl, currentStage, currentUrlStartedAt fields.</usage>
    </interface>
    <interface name="useJob" kind="hook" path="apps/web/hooks/use-jobs.ts">
      <signature>function useJob(jobId: string, options?: { enableRealtime?: boolean }): UseQueryResult&lt;Job&gt;</signature>
      <usage>Existing hook from Story 1.2 that fetches job with real-time updates. Story 1.3 will reuse without modification. Subscription already includes currentUrl and currentStage fields.</usage>
    </interface>
    <interface name="useJobResults" kind="hook" path="apps/web/hooks/use-jobs.ts (NEW)">
      <signature>function useJobResults(jobId: string, options?: { limit?: number, orderBy?: 'asc' | 'desc' }): UseQueryResult&lt;Result[]&gt;</signature>
      <usage>NEW hook to create for fetching recent completed URLs. Will query results table filtered by jobId, ordered by processedAt descending, limited to 3 results.</usage>
    </interface>
    <interface name="useCurrentURLTimer" kind="hook" path="apps/web/hooks/use-current-url-timer.ts (NEW)">
      <signature>function useCurrentURLTimer(currentUrlStartedAt: string | null): { elapsedSeconds: number }</signature>
      <usage>NEW custom hook for local timer calculation. Returns elapsed seconds, updated every 1 second via setInterval. Returns 0 when currentUrlStartedAt is null.</usage>
    </interface>
    <interface name="subscribeToJob" kind="function" path="apps/web/lib/realtime-service.ts">
      <signature>function subscribeToJob(jobId: string, onUpdate: (payload: any) =&gt; void): RealtimeChannel</signature>
      <usage>Existing Realtime subscription service. Already used by useJob hook - no changes needed. Returns channel for cleanup.</usage>
    </interface>
    <interface name="Card" kind="component" path="apps/web/components/ui/card.tsx">
      <signature>Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter</signature>
      <usage>shadcn/ui Card components for panel layout. CurrentURLPanel will use Card as container.</usage>
    </interface>
    <interface name="Tooltip" kind="component" path="apps/web/components/ui/tooltip.tsx (NEEDS_INSTALL)">
      <signature>Tooltip, TooltipTrigger, TooltipContent, TooltipProvider</signature>
      <usage>Radix Tooltip component for showing full URL on hover. Must install @radix-ui/react-tooltip and add shadcn/ui component file.</usage>
    </interface>
  </interfaces>

  <tests>
    <standards>
      Testing approach established by Stories 1.1 and 1.2:
      - Manual functional testing via Chrome DevTools MCP (take snapshots, verify rendering, test interactions)
      - Integration testing with Supabase MCP (trigger database updates, verify real-time UI updates)
      - Unit tests for custom hooks (useCurrentURLTimer) using Jest - 100% coverage required
      - Component tests deferred for MVP velocity (React Testing Library tests added in future sprint)
      - E2E tests with Playwright deferred to later sprint
      - Accessibility testing: keyboard navigation, ARIA labels, screen reader compatibility via Chrome DevTools accessibility tree
    </standards>
    <locations>
      - Custom hook tests: packages/shared/src/hooks/__tests__/ OR apps/web/hooks/__tests__/
      - Component tests (deferred): apps/web/components/__tests__/
      - Test configuration: packages/shared/jest.config.js (already exists from Story 1.2)
    </locations>
    <ideas>
      <test id="1" acs="1,2,3,6,8">
        Unit Test (useCurrentURLTimer): Test timer returns 0 when currentUrlStartedAt is null. Test timer increments every second when valid ISO timestamp provided. Test timer cleanup on unmount.
      </test>
      <test id="2" acs="1,3,6,7,8">
        Manual (Chrome DevTools): Navigate to job detail page, take snapshot, verify CurrentURLPanel renders with "Currently Processing:" header. Verify empty state "Waiting to start..." when currentUrl is null.
      </test>
      <test id="3" acs="2,3">
        Manual (Chrome DevTools): Verify processing stage displayed with correct icon - Loader2 for fetching, Filter for filtering, Brain/Sparkles for classifying.
      </test>
      <test id="4" acs="4,7">
        Manual (Chrome DevTools + Supabase MCP): Verify timer displays "Processing for: XX seconds" and increments every second. Use Supabase MCP to update current_url_started_at timestamp, verify timer resets and starts counting from 0.
      </test>
      <test id="5" acs="5">
        Manual (Chrome DevTools): Verify RecentURLsList shows last 3 completed URLs with status icons (CheckCircle for success, XCircle for failed, MinusCircle for rejected). Verify empty state "No URLs processed yet" when no results.
      </test>
      <test id="6" acs="6">
        Manual (Chrome DevTools): Test URL truncation - verify URLs longer than 60 chars show first 50 chars + "...". Hover over truncated URL, verify Radix Tooltip appears with full URL.
      </test>
      <test id="7" acs="7">
        Integration (Supabase MCP + Chrome DevTools): Use Supabase MCP to UPDATE jobs SET current_url = 'https://example.com/new-url' WHERE id = 'test-job-id'. Wait and verify panel updates within 500ms showing new URL.
      </test>
      <test id="8" acs="8">
        Manual (Chrome DevTools): Verify accessibility - keyboard navigation works (Tab through panel elements), ARIA labels present (aria-label="Current URL Processing Status"), screen reader announces current URL and stage.
      </test>
    </ideas>
  </tests>
</story-context>
