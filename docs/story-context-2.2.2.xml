<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>2</epicId>
    <storyId>2.2</storyId>
    <title>Bulk URL Upload &amp; Job Creation</title>
    <status>Draft</status>
    <generatedAt>2025-10-14</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/Users/s0mebody/Desktop/dev/projects/website-scraper-project/docs/stories/story-2.2.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>team member</asA>
    <iWant>upload URLs via file or textarea and create scraping job</iWant>
    <soThat>I can start processing my URL list</soThat>
    <tasks>
      - Task 1: Set Up File Upload Infrastructure (AC: 1) - Install multer, configure file size limits, create DTOs
      - Task 2: Implement CSV/TXT File Parsing (AC: 2) - Create FileParserService, CSV parsing with papaparse, URL column auto-detection
      - Task 3: URL Validation and Normalization (AC: 3) - Create UrlValidationService, format validation, normalization
      - Task 4: URL Deduplication Logic (AC: 4) - In-job deduplication with Set data structure, normalize before dedup
      - Task 5: Database Job and URL Insertion (AC: 5, 6) - Update JobsService, database transaction, bulk insert URLs
      - Task 6: Build Response Payload (AC: 7) - Create response DTO with job_id, url_count, duplicates_removed_count
      - Task 7: Performance Optimization for Large Uploads (AC: 8) - Profile 10K URLs, optimize bulk insert, streaming
      - Task 8: Error Handling and Validation (AC: 9) - Validate file format/size, handle errors
      - Task 9: Story 2.1 Follow-Up Item - Add error event listener to BullMQ Queue
      - Task 10: Integration Testing (AC: ALL) - Test CSV/TXT/JSON uploads, deduplication, large files, errors
    </tasks>
  </story>

  <acceptanceCriteria>
    1. POST /jobs/create endpoint accepts file upload (CSV, TXT) via multipart/form-data
    2. CSV parser handles: single column, multi-column (auto-detect URL column), headers/no headers
    3. URL validation: basic format check, remove empty lines, trim whitespace
    4. Deduplication: remove duplicate URLs within job
    5. Job record created in database with status "pending"
    6. URLs bulk inserted into database linked to job
    7. Response returns: job_id, url_count, duplicates_removed_count
    8. Large uploads (10K+ URLs) processed efficiently (&lt;5 seconds)
    9. Error handling: invalid file format, no URLs found, file too large (&gt;10MB)
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="docs/PRD.md" section="FR007" title="Bulk URL Upload">
        Users shall upload URL lists via file upload (CSV, TXT) or paste directly into textarea, with support for 5K-10K URLs per batch and automatic deduplication.
      </doc>
      <doc path="docs/tech-spec-epic-2.md" section="Story 2.2" title="Bulk URL Upload &amp; Job Creation">
        - AC2.2.1-11: Endpoint accepts file upload (CSV, TXT) via multipart/form-data, JSON body, text body
        - CSV parser handles: single column, multi-column (auto-detect URL column), headers/no headers
        - URL validation, deduplication, bulk insert
        - Large uploads (10K+) processed efficiently (&lt;5 seconds)
        - Error handling: invalid file format, no URLs found, file too large
      </doc>
      <doc path="docs/tech-spec-epic-2.md" section="Request/Response DTOs" title="CreateJobDto">
        CreateJobDto with validation decorators:
        - name (optional string)
        - urls (array of strings, 1-10000 max)
      </doc>
      <doc path="docs/tech-spec-epic-2.md" section="NPM Dependencies" title="File Upload Dependencies">
        - @nestjs/platform-express@^10.3.0 (file upload handling)
        - multer@^1.4.5-lts.1 (file upload middleware)
        - papaparse@^5.4.1 (CSV parsing)
        - @types/multer@^1.4.11, @types/papaparse@^5.3.14
        - class-validator@^0.14.0, class-transformer@^0.5.0
      </doc>
      <doc path="docs/stories/story-2.1.md" section="Dev Notes" title="NestJS Backend Foundation">
        - Story 2.1 provides NestJS backend, BullMQ queue, Supabase client
        - Database schema: jobs table, results table (urls), activity_logs
        - POST /jobs endpoint exists for job creation
        - JobsService has basic CRUD operations
      </doc>
    </docs>
    <code>
      <artifact path="apps/api/src/jobs/jobs.controller.ts" kind="controller" symbol="JobsController" reason="Existing controller where POST /jobs/create will be added with file upload support"/>
      <artifact path="apps/api/src/jobs/jobs.service.ts" kind="service" symbol="JobsService" reason="Business logic service where createJobWithUrls() method will be implemented with database transaction"/>
      <artifact path="apps/api/src/jobs/jobs.module.ts" kind="module" symbol="JobsModule" reason="Module where MulterModule will be imported and new services registered"/>
      <artifact path="apps/api/src/supabase/supabase.service.ts" kind="service" symbol="SupabaseService" reason="Database client service for job and URL insertion operations"/>
      <artifact path="apps/api/src/queue/queue.service.ts" kind="service" symbol="QueueService" reason="Queue service where error event listener will be added (Story 2.1 follow-up)"/>
      <artifact path="packages/shared/src/types/database.types.ts" kind="types" reason="Supabase generated types for jobs and results tables"/>
    </code>
    <dependencies>
      <node>
        <dependency name="@nestjs/platform-express" version="^10.3.0"/>
        <dependency name="multer" version="^1.4.5-lts.1"/>
        <dependency name="papaparse" version="^5.4.1"/>
        <dependency name="@types/multer" version="^1.4.11"/>
        <dependency name="@types/papaparse" version="^5.3.14"/>
        <dependency name="class-validator" version="^0.14.1"/>
        <dependency name="class-transformer" version="^0.5.1"/>
        <dependency name="@website-scraper/shared" version="*"/>
      </node>
    </dependencies>
  </artifacts>

  <constraints>
    - RESTful endpoint: POST /jobs/create with multiple content types (multipart/form-data, application/json, text/plain)
    - Proper HTTP status codes: 201 Created, 400 Bad Request, 413 Payload Too Large, 500 Internal Server Error
    - CSV parsing with papaparse library for robust header detection and multi-column handling
    - URL processing pipeline: Parse → Validate → Normalize → Deduplicate → Bulk insert (transaction)
    - Database transaction for atomicity (job + URLs inserted together or rolled back)
    - Bulk insert optimization: Batch URLs into chunks of 1000 for Supabase insert
    - Performance target: &lt;5 seconds for 10K URLs (file upload → database insertion complete)
    - File size limit: 10MB enforced by multer configuration
    - File type validation: Only .csv and .txt allowed
    - Input validation: Use class-validator decorators in DTOs
    - NestJS module-based architecture with proper dependency injection
  </constraints>

  <interfaces>
    <interface name="POST /jobs/create" kind="REST endpoint" signature="POST /jobs/create (multipart/form-data | application/json | text/plain)">
      Request: file upload, JSON body with urls array, or text body with line-separated URLs
      Response: { job_id, url_count, duplicates_removed_count, created_at }
    </interface>
    <interface name="JobsService.createJobWithUrls()" kind="service method" signature="createJobWithUrls(name: string, urls: string[]): Promise&lt;JobResponseDto&gt;">
      Database transaction: Insert job record + bulk insert URLs into results table
    </interface>
    <interface name="FileParserService" kind="service" path="apps/api/src/jobs/services/file-parser.service.ts">
      Methods: parseCSV(buffer), parseTXT(buffer), detectUrlColumn(rows)
    </interface>
    <interface name="UrlValidationService" kind="service" path="apps/api/src/jobs/services/url-validation.service.ts">
      Methods: validateUrl(url), normalizeUrl(url), filterValidUrls(urls)
    </interface>
    <interface name="SupabaseService" kind="database client" path="apps/api/src/supabase/supabase.service.ts">
      Methods: getClient() returns Supabase client for database operations
    </interface>
  </interfaces>

  <tests>
    <standards>
      Testing approach: Unit tests for services (Jest + mocks), integration tests for full endpoint testing (Postman/curl), database tests via Supabase MCP, performance tests for 10K URLs. Unit test coverage for FileParserService and UrlValidationService includes: CSV parsing (single/multi-column, headers/no headers, empty file), TXT parsing (line-separated, whitespace handling), URL validation (valid/invalid formats), URL normalization (trailing slash, case, protocol), deduplication (exact/normalized duplicates).
    </standards>
    <locations>
      - apps/api/src/jobs/__tests__/file-parser.service.spec.ts
      - apps/api/src/jobs/__tests__/url-validation.service.spec.ts
      - Integration tests via curl/Postman for endpoint testing
      - Supabase MCP for database verification (SELECT * FROM jobs, SELECT COUNT(*) FROM results)
    </locations>
    <ideas>
      <test ac="1" idea="Test CSV upload with 1000 URLs → Verify job created with 1000 URLs in database"/>
      <test ac="2" idea="Test multi-column CSV with 3 columns (name, url, category) → Verify URLs extracted correctly from 2nd column"/>
      <test ac="3,4" idea="Test deduplication: Upload file with 100 unique URLs + 20 duplicates → Verify response shows duplicates_removed: 20"/>
      <test ac="5,6" idea="Test database transaction: Create job with 500 URLs → Verify job record exists with totalUrls=500, verify 500 rows in results table"/>
      <test ac="7" idea="Test response payload: POST /jobs/create → Verify response contains job_id, url_count, duplicates_removed_count, created_at"/>
      <test ac="8" idea="Test large upload: Upload TXT with 10K URLs → Measure time, verify &lt;5s completion, all URLs in database"/>
      <test ac="9" idea="Test error cases: Upload .xlsx file → Verify 400 Bad Request; Upload 11MB file → Verify 413 Payload Too Large; Upload empty CSV → Verify 400 with 'No valid URLs found'"/>
      <test ac="1" idea="Test JSON body: POST with JSON body { 'urls': ['url1', 'url2'] } → Verify job created"/>
    </ideas>
  </tests>
</story-context>
