<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>3</epicId>
    <storyId>3.0</storyId>
    <title>Classification Settings Management</title>
    <status>Draft</status>
    <generatedAt>2025-10-16</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/Users/s0mebody/Desktop/dev/projects/website-scraper-project/docs/stories/story-3.0.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>a team member</asA>
    <iWant>to configure classification parameters through a settings UI</iWant>
    <soThat>I can optimize pre-filtering and LLM classification without code changes</soThat>
    <tasks>
### Task 1: Database Schema and Migration (1 hour)
- Create migration file: `YYYYMMDDHHMMSS_create_classification_settings.sql`
- Define `classification_settings` table with JSONB fields for rules and indicators
- Seed default data from hardcoded values (16 rules, 5 indicators, temperature 0.3)

### Task 2: Settings Service (Backend) (2 hours)
- Create SettingsModule, SettingsService with cache (5-min TTL), UpdateSettingsDto
- Add safe-regex validation for regex patterns
- Range validation: temperature/confidence (0-1), content limit (1000-50000)

### Task 3: Settings Controller and API Endpoints (1.5 hours)
- GET /api/settings - returns current settings (defaults if none exist)
- PUT /api/settings - validates and updates settings
- Returns 400 with validation errors if invalid

### Task 4: Refactor PreFilterService for Database Settings (2 hours)
- Inject SettingsService, load rules from database instead of JSON
- Filter only enabled rules, fallback to JSON if database unavailable
- Add refreshRules() method for settings updates

### Task 5: Refactor LLMService for Database Settings (2 hours)
- Inject SettingsService, load indicators from database
- Use database temperature and content truncation limit
- Implement confidence threshold filtering
- Fallback to hardcoded values if database unavailable

### Task 6: Shared Types for Settings (0.5 hours)
- Create ClassificationSettings interface in /packages/shared/src/types/settings.ts
- Add enabled field to PreFilterRule type

### Task 7: Frontend Settings Page UI (4 hours)
- Create /settings route with form sections
- Pre-filter rules editor with drag-and-drop reordering
- Classification indicators multi-line textarea
- LLM parameters sliders (temperature, content limit)
- Confidence threshold slider with explanation
- Form validation with zod schema

### Task 8: Frontend Settings API Integration (2 hours)
- Create useSettings hook with react-query
- Implement optimistic updates on save
- Success/error toast notifications
- Reset to defaults with confirmation

### Task 9: End-to-End Testing (2 hours)
- E2E tests for settings CRUD operations
- Verify settings applied to job processing
- Test validation errors and fallback behavior
    </tasks>
  </story>

  <acceptanceCriteria>
**Backend - Settings Persistence:**
AC1: Database table with JSONB fields for rules, indicators, and parameters
AC2: GET /api/settings returns current or default settings
AC3: PUT /api/settings updates with validation
AC4: Regex safety validation with safe-regex, range validation
AC5: Migration seeds 16 rules, 5 indicators, temperature 0.3

**Backend - Service Integration:**
AC6: PreFilterService loads enabled rules from database
AC7: LLMService uses database temperature, content limit, indicators
AC8: Confidence threshold filtering (mark below threshold as not_suitable)
AC9: In-memory cache with 5-minute TTL

**Frontend - Settings UI:**
AC10: Settings page at /settings route
AC11: 4 form sections (rules, indicators, LLM params, threshold)
AC12: Pre-filter rules editor with enable/disable, add, delete, reorder
AC13: Classification indicators multi-line textarea
AC14: LLM parameters controls (temperature slider, content limit input)
AC15: Confidence threshold slider with filtering indicator
AC16: Save and reset buttons
AC17: Form validation for regex patterns, range validation
AC18: Success/error toast notifications

**Testing:**
AC19: Unit and integration tests for services
AC20: E2E tests for settings UI and job processing integration
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="/docs/PRD.md" section="FR013" snippet="Users shall configure classification parameters through settings interface including pre-filter regex rules, classification indicators, LLM temperature, confidence threshold, and content truncation limits. Settings persisted globally and take effect immediately for new jobs." />
      <doc path="/docs/epic-stories.md" section="Story 3.0" snippet="Classification Settings Management - Enable user configuration of classification parameters without code changes. Backend persistence with JSONB fields, service integration with caching, frontend UI with form validation." />
      <doc path="/docs/solution-architecture.md" section="NestJS Backend Patterns" snippet="Module Organization: Settings feature as standalone module with service, controller, DTOs. Dependency Injection: SettingsService injected into PreFilterService and LLMService. Caching Strategy: In-memory cache with TTL using singleton pattern." />
    </docs>
    <code>
      <artifact path="/apps/api/src/config/default-filter-rules.json" kind="config" reason="Contains 16 default pre-filter rules to be seeded in migration. Rules must be migrated with enabled:true field added." />
      <artifact path="/apps/api/src/jobs/services/prefilter.service.ts" kind="service" lines="1-171" reason="Must be refactored to inject SettingsService and load rules from database. Currently loads from JSON file in constructor (line 26). Need to add refreshRules() method and enabled filtering." />
      <artifact path="/apps/api/src/jobs/services/llm.service.ts" kind="service" lines="59-72" reason="Classification prompt indicators (lines 62-67) must be loaded from database. Temperature hardcoded at line 288 (0.3) must use database value. Content truncation at line 72 (10000) must use database setting." />
      <artifact path="/packages/shared/src/types/prefilter.ts" kind="types" reason="PreFilterRule interface must be extended with optional enabled:boolean field for settings management." />
    </code>
    <dependencies>
      <node>
        <dependency name="safe-regex" version="^2.1.1" reason="Regex ReDoS vulnerability detection for pattern validation" />
        <dependency name="class-validator" version="^0.14.0" reason="DTO validation decorators for settings endpoints" />
        <dependency name="react-hook-form" version="^7.x" reason="Form state management for complex settings UI" />
        <dependency name="zod" version="^3.x" reason="Client-side validation schema matching backend" />
        <dependency name="@dnd-kit/core" version="^6.x" reason="Drag and drop for rule reordering in UI" />
      </node>
    </dependencies>
  </artifacts>

  <constraints>
**Architecture Patterns:**
- NestJS module organization: SettingsModule as standalone feature module
- Dependency injection: SettingsService injected into PreFilterService and LLMService
- Single row config pattern: One global settings row in database (no multi-tenancy)
- Fail-open strategy: Use hardcoded defaults if database unavailable
- JSONB for flexibility: Rules and indicators stored as JSONB arrays

**Development Constraints:**
- Must maintain backward compatibility: Existing jobs must work during migration
- No breaking changes: Services must gracefully handle missing settings table
- Performance: Settings loaded once on initialization, cached for 5 minutes
- Testing: All services must work with mocked SettingsService for unit tests

**Data Integrity:**
- Regex patterns must pass safe-regex validation to prevent ReDoS attacks
- Temperature and confidence must be 0-1 range (decimal)
- Content truncation limit must be 1000-50000 (integer)
- Pre-filter rules array must contain valid category, pattern, reasoning, enabled fields
  </constraints>
  <interfaces>
**API Endpoints:**
- GET /api/settings → Returns ClassificationSettings (current or defaults)
- PUT /api/settings → Accepts UpdateSettingsDto, returns updated ClassificationSettings

**Service Interfaces:**
- SettingsService.getSettings() → Promise&lt;ClassificationSettings&gt;
- SettingsService.updateSettings(dto: UpdateSettingsDto) → Promise&lt;ClassificationSettings&gt;
- SettingsService.getDefaultSettings() → ClassificationSettings
- PreFilterService.refreshRules() → void (called when settings updated)

**Type Definitions (to be created):**
```typescript
interface ClassificationSettings {
  id: string;
  prefilter_rules: PreFilterRuleWithEnabled[];
  classification_indicators: string[];
  llm_temperature: number; // 0-1
  confidence_threshold: number; // 0-1
  content_truncation_limit: number; // 1000-50000
  updated_at: Date;
}

interface PreFilterRuleWithEnabled extends PreFilterRule {
  enabled: boolean;
}
```
  </interfaces>
  <tests>
    <standards>
**Unit Testing (Jest):**
- Mock SettingsService in PreFilterService and LLMService tests
- Test validation logic: safe-regex for patterns, range validation for numbers
- Test cache behavior: TTL expiration, invalidation on update
- Test fallback logic: hardcoded defaults when database unavailable

**Integration Testing (Jest + Test Database):**
- Real database operations: CRUD on classification_settings table
- Service integration: PreFilterService loads rules, LLMService uses temperature
- Confidence threshold filtering with various values (0.0, 0.5, 0.9)
- Settings update triggers rule refresh in PreFilterService

**E2E Testing (Playwright):**
- Complete user flow: Navigate to settings, update, save, create job, verify applied
- UI validation: Invalid regex shows error, out-of-range values rejected
- Optimistic updates: UI updates immediately, reverts on error
- Reset to defaults: Restores all hardcoded values
    </standards>
    <locations>
**Unit Tests:**
- /apps/api/src/settings/settings.service.spec.ts
- /apps/api/src/settings/settings.controller.spec.ts
- /apps/api/src/jobs/services/prefilter.service.spec.ts (update existing)
- /apps/api/src/jobs/services/llm.service.spec.ts (update existing)

**Integration Tests:**
- /apps/api/test/settings.e2e-spec.ts

**E2E Tests:**
- /apps/web/tests/e2e/settings.spec.ts
    </locations>
    <ideas>
**Test Scenarios Mapped to ACs:**

AC1-5 (Backend Persistence):
- Create settings with all fields, verify JSONB structure
- GET with empty database returns defaults (16 rules, 5 indicators, temp 0.3)
- PUT with valid data updates successfully
- PUT with unsafe regex (ReDoS) rejected with clear error
- Migration seeds correct default values

AC6-9 (Service Integration):
- PreFilterService loads only enabled rules from database
- Disabled rule not applied during filtering
- LLMService uses database temperature in API call (mock to verify)
- Confidence 0.5 threshold filters results below 0.5 to not_suitable
- Cache hit avoids database query within 5 minutes
- Cache miss after TTL triggers database reload

AC10-18 (Frontend UI):
- Navigate to /settings, form loads with current settings
- Edit pre-filter rule pattern, save, verify persisted in database
- Add new rule with enabled:true, verify in results
- Disable rule, create job, verify rule not applied (check logs)
- Update temperature to 0.7, create job, verify in LLM logs
- Set confidence threshold to 0.8, verify classifications filtered
- Invalid regex pattern shows error message below input
- Temperature = 1.5 shows range error
- Save success shows toast "Settings saved successfully"
- Reset to defaults restores all 16 rules, 5 indicators, temp 0.3
    </ideas>
  </tests>
</story-context>
