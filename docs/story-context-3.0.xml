<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>3</epicId>
    <storyId>0</storyId>
    <title>Classification Settings Management (3-Tier Architecture)</title>
    <status>Draft</status>
    <generatedAt>2025-10-16</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/Users/s0mebody/Desktop/dev/projects/website-scraper-project/docs/stories/story-3.0.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>team member</asA>
    <iWant>configure layer-specific classification parameters through a tabbed settings UI supporting Layer 1 domain analysis, Layer 2 operational validation, Layer 3 LLM classification, confidence bands, and manual review queue settings</iWant>
    <soThat>I can optimize the 3-tier progressive filtering pipeline and manual review routing without code changes</soThat>
    <tasks>
      <task id="1" title="Database Schema Migration">
        <description>Refactor classification_settings table for layer-specific structure (layer1_rules, layer2_rules, layer3_rules, confidence_bands, manual_review_settings)</description>
        <effort>2-3 hours</effort>
        <acceptanceCriteria>AC1</acceptanceCriteria>
      </task>
      <task id="2" title="Refactor Backend Services for Layer-Specific Settings">
        <description>Update Layer1DomainAnalysisService, Layer2OperationalFilterService, Layer3LlmService, create ManualReviewRouterService</description>
        <effort>4-5 hours</effort>
        <acceptanceCriteria>AC2</acceptanceCriteria>
      </task>
      <task id="3" title="Update Settings Controller and DTOs">
        <description>Update GET/PUT/POST endpoints for layer-structured payloads with validation</description>
        <effort>2-3 hours</effort>
        <acceptanceCriteria>AC10, AC11, AC12</acceptanceCriteria>
      </task>
      <task id="4" title="Frontend - Implement Tabbed Settings UI">
        <description>Create 5-tab interface (Layer 1/2/3, Confidence Bands, Manual Review) with global save/reset</description>
        <effort>6-8 hours</effort>
        <acceptanceCriteria>AC3, AC4, AC5, AC6, AC7, AC8, AC9</acceptanceCriteria>
      </task>
      <task id="5" title="Shared Types for Layer-Specific Settings">
        <description>Define Layer1Rules, Layer2Rules, Layer3Rules, ConfidenceBands, ManualReviewSettings interfaces</description>
        <effort>1-2 hours</effort>
        <acceptanceCriteria>AC1, AC2</acceptanceCriteria>
      </task>
      <task id="6" title="Testing - Backend Unit Tests">
        <description>Update tests for layer services and settings service</description>
        <effort>3-4 hours</effort>
        <acceptanceCriteria>AC13</acceptanceCriteria>
      </task>
      <task id="7" title="Testing - Frontend Unit Tests">
        <description>Test tab switching, global save, reset, validation</description>
        <effort>2-3 hours</effort>
        <acceptanceCriteria>AC14</acceptanceCriteria>
      </task>
      <task id="8" title="E2E Integration Testing">
        <description>Validate layer-specific settings affect job processing correctly</description>
        <effort>3-4 hours</effort>
        <acceptanceCriteria>AC15</acceptanceCriteria>
      </task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="AC1" priority="high">
      <title>Refactor classification_settings table for 3-tier architecture</title>
      <description>Migrate prefilter_rules → layer1_rules, add layer2_rules, layer3_rules, confidence_bands, manual_review_settings JSONB fields</description>
      <tasks>1, 5</tasks>
    </criterion>
    <criterion id="AC2" priority="high">
      <title>Update backend services for layer-specific settings</title>
      <description>Refactor PreFilterService → Layer1DomainAnalysisService, update Layer2OperationalFilterService, Layer3LlmService, create ManualReviewRouterService</description>
      <tasks>2, 5</tasks>
    </criterion>
    <criterion id="AC3" priority="high">
      <title>Implement tabbed navigation for layer-specific settings</title>
      <description>5 tabs (Layer 1 Domain / Layer 2 Page / Layer 3 LLM / Confidence Bands / Manual Review) with global save/reset</description>
      <tasks>4</tasks>
    </criterion>
    <criterion id="AC4" priority="medium">
      <title>Layer 1 - Domain Analysis tab</title>
      <description>TLD filtering, industry keywords, URL pattern exclusions, target elimination rate slider</description>
      <tasks>4</tasks>
    </criterion>
    <criterion id="AC5" priority="medium">
      <title>Layer 2 - Operational Validation tab</title>
      <description>Blog freshness threshold, required company pages, tech stack signals, design score</description>
      <tasks>4</tasks>
    </criterion>
    <criterion id="AC6" priority="medium">
      <title>Layer 3 - LLM Classification tab</title>
      <description>Content marketing indicators, SEO signals, temperature, content truncation limit</description>
      <tasks>4</tasks>
    </criterion>
    <criterion id="AC7" priority="medium">
      <title>Confidence Bands tab</title>
      <description>Configure high/medium/low/auto-reject bands with min/max sliders, action dropdowns, validation</description>
      <tasks>4</tasks>
    </criterion>
    <criterion id="AC8" priority="medium">
      <title>Manual Review Queue tab</title>
      <description>Queue size limit, auto-review timeout, notification preferences, current queue status display</description>
      <tasks>4</tasks>
    </criterion>
    <criterion id="AC9" priority="high">
      <title>Global save/reset functionality</title>
      <description>Save button persists ALL tabs, Reset button triggers confirmation and resets ALL layers</description>
      <tasks>4</tasks>
    </criterion>
    <criterion id="AC10" priority="high">
      <title>Update GET /api/settings to return layer-structured settings</title>
      <description>Response includes layer1_rules, layer2_rules, layer3_rules, confidence_bands, manual_review_settings</description>
      <tasks>3</tasks>
    </criterion>
    <criterion id="AC11" priority="high">
      <title>Update PUT /api/settings to accept layer-structured payload</title>
      <description>Validate each layer's schema, return layer-specific error messages</description>
      <tasks>3</tasks>
    </criterion>
    <criterion id="AC12" priority="high">
      <title>POST /api/settings/reset endpoint resets all layers</title>
      <description>Reset all layers to defaults, log action, return full default settings object</description>
      <tasks>3</tasks>
    </criterion>
    <criterion id="AC13" priority="high">
      <title>Unit and integration tests for layer services</title>
      <description>Test layer services load settings correctly, apply rules, fall back to defaults</description>
      <tasks>6</tasks>
    </criterion>
    <criterion id="AC14" priority="medium">
      <title>Frontend unit tests for tabbed UI</title>
      <description>Test tab switching, global save, reset confirmation, validation errors</description>
      <tasks>7</tasks>
    </criterion>
    <criterion id="AC15" priority="high">
      <title>E2E integration test for layer-specific settings</title>
      <description>Update layer settings → Create job → Verify settings applied in each layer</description>
      <tasks>8</tasks>
    </criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc id="doc-1">
        <path>/Users/s0mebody/Desktop/dev/projects/website-scraper-project/docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>FR008: 3-tier progressive filtering (lines 100-126)</section>
        <snippet>System shall apply 3-tier progressive filtering: (1) Domain/URL pattern analysis without HTTP requests to eliminate 40-60% of candidates, (2) Homepage scraping and company validation to eliminate additional 20-30%, (3) LLM classification with confidence-based routing to manual review queue</snippet>
        <reason>Defines requirements for 3-tier architecture that settings must support</reason>
      </doc>
      <doc id="doc-2">
        <path>/Users/s0mebody/Desktop/dev/projects/website-scraper-project/docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>FR013: Classification settings management (lines 143-144)</section>
        <snippet>Users shall configure classification parameters through a settings interface including: pre-filter regex rules (enable/disable, add/edit/remove), classification indicators (keywords and criteria), LLM temperature (0-1), confidence threshold (0-1), and content truncation limits</snippet>
        <reason>Defines user-facing requirements for settings management UI</reason>
      </doc>
      <doc id="doc-3">
        <path>/Users/s0mebody/Desktop/dev/projects/website-scraper-project/docs/epic-stories.md</path>
        <title>Epic Breakdown</title>
        <section>Story 3.0 Specification with UI Wireframes (lines 497-816)</section>
        <snippet>Complete specification for layer-specific settings UI with 5 tabs, wireframes for each tab, component library guidance (shadcn/ui), responsive design patterns</snippet>
        <reason>Authoritative specification for UI implementation including wireframes and component choices</reason>
      </doc>
      <doc id="doc-4">
        <path>/Users/s0mebody/Desktop/dev/projects/website-scraper-project/docs/stories/story-3.0-v1.md</path>
        <title>Story 3.0 V1 Implementation</title>
        <section>Complete V1 settings story (lines 1-987)</section>
        <snippet>Completed V1 single-level settings with backend (SettingsService, SettingsController), frontend (single form UI), database schema (classification_settings table with prefilter_rules JSONB), status: conditionally approved pending integration testing</snippet>
        <reason>Baseline implementation to refactor - reuse existing service architecture, migrate schema</reason>
      </doc>
      <doc id="doc-5">
        <path>/Users/s0mebody/Desktop/dev/projects/website-scraper-project/docs/epic-stories.md</path>
        <title>Epic Breakdown</title>
        <section>Story 2.3: Layer 1 Domain Analysis (lines 271-306)</section>
        <snippet>Defines Layer 1 rules structure: domain classification, TLD filtering, URL pattern exclusions, target profile matching, 40-60% elimination rate, layer1_reasoning field</snippet>
        <reason>Specifies Layer 1 rules schema and behavior for settings implementation</reason>
      </doc>
      <doc id="doc-6">
        <path>/Users/s0mebody/Desktop/dev/projects/website-scraper-project/docs/epic-stories.md</path>
        <title>Epic Breakdown</title>
        <section>Story 2.6: Layer 2 Operational Filter (lines 407-471)</section>
        <snippet>Defines Layer 2 rules structure: blog freshness threshold (90 days default), required company pages (2 of 3), tech stack detection, design quality score, layer2_signals JSONB field</snippet>
        <reason>Specifies Layer 2 rules schema and operational validation logic</reason>
      </doc>
      <doc id="doc-7">
        <path>/Users/s0mebody/Desktop/dev/projects/website-scraper-project/docs/epic-stories.md</path>
        <title>Epic Breakdown</title>
        <section>Story 2.4: Layer 3 LLM Classification (lines 308-364)</section>
        <snippet>Defines Layer 3 rules structure: content marketing indicators, SEO signals, temperature (0.3 default), confidence scoring (0-1 scale), confidence_band field (high/medium/low/auto_reject), manual_review_required boolean</snippet>
        <reason>Specifies Layer 3 rules schema and confidence-based routing logic</reason>
      </doc>
    </docs>
    <code>
      <artifact id="code-1">
        <path>/apps/api/src/settings/settings.service.ts</path>
        <kind>service</kind>
        <symbol>SettingsService</symbol>
        <lines>1-350</lines>
        <reason>Existing V1 settings service to refactor for layer-structured schema - reuse caching, validation patterns</reason>
      </artifact>
      <artifact id="code-2">
        <path>/apps/api/src/settings/settings.controller.ts</path>
        <kind>controller</kind>
        <symbol>SettingsController</symbol>
        <lines>1-100</lines>
        <reason>Existing V1 controller with GET/PUT/POST endpoints - update for layer-structured payloads</reason>
      </artifact>
      <artifact id="code-3">
        <path>/apps/api/src/settings/dto/update-settings.dto.ts</path>
        <kind>dto</kind>
        <symbol>UpdateSettingsDto</symbol>
        <lines>1-50</lines>
        <reason>Existing V1 DTO to refactor - replace single prefilter_rules field with layer1_rules, layer2_rules, layer3_rules, confidence_bands, manual_review_settings</reason>
      </artifact>
      <artifact id="code-4">
        <path>/apps/api/src/jobs/services/prefilter.service.ts</path>
        <kind>service</kind>
        <symbol>PreFilterService</symbol>
        <lines>1-200</lines>
        <reason>To be renamed → Layer1DomainAnalysisService, update to load from layer1_rules instead of prefilter_rules</reason>
      </artifact>
      <artifact id="code-5">
        <path>/apps/api/src/jobs/services/layer2-operational-filter.service.ts</path>
        <kind>service</kind>
        <symbol>Layer2OperationalFilterService</symbol>
        <lines>1-300</lines>
        <reason>Update to inject SettingsService and load from layer2_rules (blog_freshness_days, required_pages, tech_stack_tools, design_quality_minimum)</reason>
      </artifact>
      <artifact id="code-6">
        <path>/apps/api/src/jobs/services/llm.service.ts</path>
        <kind>service</kind>
        <symbol>LlmService</symbol>
        <lines>1-450</lines>
        <reason>Update to load from layer3_rules (content_marketing_indicators, seo_signals, temperature, content_truncation_limit)</reason>
      </artifact>
      <artifact id="code-7">
        <path>/apps/web/app/settings/page.tsx</path>
        <kind>component</kind>
        <symbol>SettingsPage</symbol>
        <lines>1-200</lines>
        <reason>Existing V1 single-form UI - refactor to tabbed interface with shadcn/ui Tabs component</reason>
      </artifact>
      <artifact id="code-8">
        <path>/apps/web/hooks/useSettings.ts</path>
        <kind>hook</kind>
        <symbol>useSettings, useUpdateSettings, useResetSettings</symbol>
        <lines>1-100</lines>
        <reason>Existing V1 hooks - update to handle layer-structured GET response, build layer-structured PUT payload from all tabs' state</reason>
      </artifact>
      <artifact id="code-9">
        <path>/packages/shared/src/types/settings.ts</path>
        <kind>types</kind>
        <symbol>ClassificationSettings, PreFilterRule</symbol>
        <lines>1-50</lines>
        <reason>Existing V1 types - add Layer1Rules, Layer2Rules, Layer3Rules, ConfidenceBands, ManualReviewSettings interfaces</reason>
      </artifact>
      <artifact id="code-10">
        <path>/supabase/migrations/20251016000000_create_classification_settings.sql</path>
        <kind>migration</kind>
        <symbol>classification_settings table</symbol>
        <lines>1-100</lines>
        <reason>Existing V1 migration creating classification_settings table - create new migration to add layer columns</reason>
      </artifact>
    </code>
    <dependencies>
      <node>
        <package name="@nestjs/common" version="^10.0.0">NestJS dependency injection for services</package>
        <package name="@nestjs/config" version="^10.0.0">Environment configuration module</package>
        <package name="class-validator" version="^0.14.0">DTO validation decorators</package>
        <package name="class-transformer" version="^0.5.1">DTO transformation</package>
        <package name="safe-regex" version="^2.1.1">Regex ReDoS vulnerability detection</package>
        <package name="node-cache" version="^5.1.2">In-memory caching for settings</package>
      </node>
      <react>
        <package name="react" version="^18.0.0">React framework</package>
        <package name="next" version="^14.0.0">Next.js App Router</package>
        <package name="@tanstack/react-query" version="^5.0.0">Server state management for settings CRUD</package>
        <package name="react-hook-form" version="^7.0.0">Form state management for tabs</package>
        <package name="zod" version="^3.0.0">Client-side validation schema</package>
        <package name="@radix-ui/react-tabs" version="^1.0.0">shadcn/ui Tabs component</package>
        <package name="@radix-ui/react-slider" version="^1.0.0">shadcn/ui Slider component</package>
        <package name="@radix-ui/react-switch" version="^1.0.0">shadcn/ui Switch component</package>
      </react>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint id="c1" type="architecture">
      <title>Service Layer Separation</title>
      <description>Each layer service (Layer1DomainAnalysisService, Layer2OperationalFilterService, Layer3LlmService) must load only its own layer settings, reducing coupling</description>
      <source>Story 3.0 Dev Notes - Architecture Patterns</source>
    </constraint>
    <constraint id="c2" type="architecture">
      <title>Fail-Open Strategy</title>
      <description>All layer services must fall back to hardcoded defaults if SettingsService unavailable (resilience pattern)</description>
      <source>Story 3.0-v1 Dev Notes, NFR004: Reliability</source>
    </constraint>
    <constraint id="c3" type="database">
      <title>Preserve V1 Data</title>
      <description>Migration must copy existing prefilter_rules → layer1_rules without data loss (backward compatibility)</description>
      <source>Story 3.0 Dev Notes - Refactoring Strategy</source>
    </constraint>
    <constraint id="c4" type="validation">
      <title>Confidence Bands Must Not Overlap</title>
      <description>Validate confidence_bands: no overlaps, must cover full 0-1 range, actions valid (auto_approve/manual_review/reject)</description>
      <source>AC11: PUT validation requirements</source>
    </constraint>
    <constraint id="c5" type="ui">
      <title>Global Save Collects All Tabs</title>
      <description>Save button must collect settings from ALL tabs in single PUT request (not per-tab saves)</description>
      <source>AC9: Global save/reset functionality</source>
    </constraint>
    <constraint id="c6" type="testing">
      <title>E2E Integration Required</title>
      <description>Must validate layer-specific settings actually affect job processing: update Layer X settings → Create job → Verify Layer X applies new rules</description>
      <source>AC15, Story 3.0-v1 Senior Review (Always Works Philosophy)</source>
    </constraint>
    <constraint id="c7" type="performance">
      <title>Settings Cached with 5-Minute TTL</title>
      <description>Settings loaded once per service initialization, cached with 5-minute TTL (cache hit rate should be >99%)</description>
      <source>Story 3.0-v1 AC9, Dev Notes - Performance Considerations</source>
    </constraint>
  </constraints>

  <interfaces>
    <interface id="i1">
      <name>SettingsService.getSettings()</name>
      <kind>method</kind>
      <signature>getSettings(): Promise&lt;ClassificationSettings&gt;</signature>
      <path>/apps/api/src/settings/settings.service.ts</path>
      <description>Returns layer-structured settings object with layer1_rules, layer2_rules, layer3_rules, confidence_bands, manual_review_settings. Layer services must call this to load their configuration.</description>
    </interface>
    <interface id="i2">
      <name>SettingsService.updateSettings(dto)</name>
      <kind>method</kind>
      <signature>updateSettings(dto: UpdateSettingsDto): Promise&lt;ClassificationSettings&gt;</signature>
      <path>/apps/api/src/settings/settings.service.ts</path>
      <description>Validates and updates layer-structured settings, invalidates cache, returns updated settings object</description>
    </interface>
    <interface id="i3">
      <name>SettingsService.resetToDefaults()</name>
      <kind>method</kind>
      <signature>resetToDefaults(): Promise&lt;ClassificationSettings&gt;</signature>
      <path>/apps/api/src/settings/settings.service.ts</path>
      <description>Resets all layers to hardcoded defaults, persists to database, invalidates cache, returns default settings object</description>
    </interface>
    <interface id="i4">
      <name>GET /api/settings</name>
      <kind>endpoint</kind>
      <signature>GET /api/settings → ClassificationSettings</signature>
      <path>/apps/api/src/settings/settings.controller.ts</path>
      <description>Returns layer-structured settings including all 5 sections: layer1_rules, layer2_rules, layer3_rules, confidence_bands, manual_review_settings</description>
    </interface>
    <interface id="i5">
      <name>PUT /api/settings</name>
      <kind>endpoint</kind>
      <signature>PUT /api/settings (body: UpdateSettingsDto) → ClassificationSettings</signature>
      <path>/apps/api/src/settings/settings.controller.ts</path>
      <description>Accepts layer-structured payload, validates each layer's schema, returns updated settings or 400 with layer-specific error messages</description>
    </interface>
    <interface id="i6">
      <name>POST /api/settings/reset</name>
      <kind>endpoint</kind>
      <signature>POST /api/settings/reset → ClassificationSettings</signature>
      <path>/apps/api/src/settings/settings.controller.ts</path>
      <description>Resets all layers to defaults, logs action, returns full default settings object</description>
    </interface>
    <interface id="i7">
      <name>Tabs component (shadcn/ui)</name>
      <kind>component</kind>
      <signature>&lt;Tabs defaultValue="layer1"&gt;&lt;TabsList&gt;&lt;TabsTrigger /&gt;&lt;/TabsList&gt;&lt;TabsContent /&gt;&lt;/Tabs&gt;</signature>
      <path>@radix-ui/react-tabs</path>
      <description>Use shadcn/ui Tabs component for layer navigation UI - see https://ui.shadcn.com/docs/components/tabs</description>
    </interface>
  </interfaces>

  <tests>
    <standards>
      <paragraph>Backend unit tests use Jest with mocked dependencies. Settings service tests cover CRUD operations, validation (safe-regex, range checks), cache TTL, and normalization. Layer service tests verify settings loading, rule application, and fallback to defaults. Frontend unit tests use Jest + React Testing Library for tab components, form validation, and hooks. E2E integration tests validate end-to-end flow: update settings → create job → verify settings applied in layer processing (use Chrome DevTools MCP for manual E2E validation or Playwright for automated tests).</paragraph>
    </standards>
    <locations>
      <location>/apps/api/src/settings/__tests__/*.spec.ts</location>
      <location>/apps/api/src/jobs/services/__tests__/*.spec.ts</location>
      <location>/apps/web/app/settings/__tests__/*.test.tsx</location>
      <location>/apps/web/hooks/__tests__/*.test.ts</location>
      <location>/apps/web/tests/e2e/settings-3tier.spec.ts</location>
    </locations>
    <ideas>
      <idea ac="AC1" priority="high">
        <description>Migration test: Run migration → Verify layer1_rules copied from prefilter_rules → Verify layer2_rules, layer3_rules, confidence_bands, manual_review_settings seeded with defaults</description>
      </idea>
      <idea ac="AC2" priority="high">
        <description>Layer service integration tests: Update layer1_rules via settings → Layer1DomainAnalysisService.refreshRules() → Verify new rules applied (same for Layer2, Layer3)</description>
      </idea>
      <idea ac="AC9" priority="high">
        <description>Global save test: Update Layer 1 tab → Update Layer 3 tab → Click Save → Verify single PUT request with both layers' changes → Query database → Confirm both persisted</description>
      </idea>
      <idea ac="AC11" priority="high">
        <description>Validation tests: Send PUT with invalid confidence_bands (overlapping ranges) → Verify 400 response with clear error "Confidence bands overlap: medium.max (0.8) >= high.min (0.8)"</description>
      </idea>
      <idea ac="AC15" priority="critical">
        <description>E2E integration test: Update Layer 1 TLD filters (add .xyz to personal TLDs) → Save → Create job with example.xyz URL → Monitor logs → Verify "REJECT Layer 1 - Personal TLD (.xyz)" reasoning</description>
      </idea>
      <idea ac="AC15" priority="critical">
        <description>E2E confidence routing test: Update confidence_bands (high: 0.9-1.0 instead of 0.8-1.0) → Save → Create job → Check manual review queue → Verify URLs with confidence 0.8-0.89 now routed to manual review (previously auto-approved)</description>
      </idea>
    </ideas>
  </tests>
</story-context>
