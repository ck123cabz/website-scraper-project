<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>1.4</storyId>
    <title>Live Activity Log Streaming</title>
    <status>Draft</status>
    <generatedAt>2025-10-14</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/Users/s0mebody/Desktop/dev/projects/website-scraper-project/website-scraper-project/docs/stories/story-1.4.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>a team member</asA>
    <iWant>to see a live scrolling log of all system activities</iWant>
    <soThat>I can understand exactly what's happening and debug issues in real-time</soThat>
    <tasks>
      <task id="1" title="Update ActivityLog types and schema" acs="AC1.4.2,AC1.4.3,AC1.4.4">
        <subtask id="1.1">Review packages/shared/src/types/activity-log.ts - verify ActivityLog interface exists</subtask>
        <subtask id="1.2">If missing, create ActivityLog interface with fields: id, jobId, severity, message, context, createdAt</subtask>
        <subtask id="1.3">Define LogSeverity type: 'success' | 'info' | 'warning' | 'error'</subtask>
        <subtask id="1.4">Create Zod schema in packages/shared/src/schemas/activity-log.ts</subtask>
        <subtask id="1.5">Document backend requirement: NestJS logs service must write logs to activity_logs table</subtask>
      </task>
      <task id="2" title="Create LiveActivityLog component" acs="AC1.4.1,AC1.4.5,AC1.4.6,AC1.4.7,AC1.4.8">
        <subtask id="2.1">Create apps/web/components/live-activity-log.tsx component</subtask>
        <subtask id="2.2">Accept props: jobId: string, className?: string</subtask>
        <subtask id="2.3">Use shadcn/ui ScrollArea for scrollable container</subtask>
        <subtask id="2.4">Implement auto-scroll to latest log entry</subtask>
        <subtask id="2.5">Detect user scroll: pause auto-scroll when user scrolls up</subtask>
        <subtask id="2.6">Add "Jump to latest" button that appears when auto-scroll paused</subtask>
        <subtask id="2.7">Implement filter controls: RadioGroup or Tabs for "All | Errors Only | Info Only"</subtask>
        <subtask id="2.8">Apply filter client-side to log entries</subtask>
        <subtask id="2.9">Display log entries in reverse chronological order (latest at bottom)</subtask>
        <subtask id="2.10">Add semantic HTML: section with aria-label="Live Activity Log"</subtask>
      </task>
      <task id="3" title="Create LogEntry component" acs="AC1.4.2,AC1.4.3,AC1.4.4">
        <subtask id="3.1">Create apps/web/components/log-entry.tsx component</subtask>
        <subtask id="3.2">Accept props: log: ActivityLog, className?: string</subtask>
        <subtask id="3.3">Display timestamp using formatTimestamp() utility (HH:MM:SS format)</subtask>
        <subtask id="3.4">Display severity icon from lucide-react: CheckCircle, Info, AlertTriangle, XCircle</subtask>
        <subtask id="3.5">Display message text with appropriate text color based on severity</subtask>
        <subtask id="3.6">Use subtle background color based on severity: bg-green-50, bg-blue-50, bg-yellow-50, bg-red-50</subtask>
        <subtask id="3.7">Add hover state for better UX</subtask>
        <subtask id="3.8">Use semantic HTML: article tag for each log entry</subtask>
      </task>
      <task id="4" title="Create useActivityLogs React Query hook" acs="AC1.4.5,AC1.4.7">
        <subtask id="4.1">Create apps/web/hooks/use-activity-logs.ts hook</subtask>
        <subtask id="4.2">Accept parameters: jobId: string, filters?: { severity?: LogSeverity }</subtask>
        <subtask id="4.3">Implement GET request to /api/jobs/:jobId/logs endpoint</subtask>
        <subtask id="4.4">Use TanStack Query useQuery with appropriate query key</subtask>
        <subtask id="4.5">Return: { logs: ActivityLog[], isLoading, error, refetch }</subtask>
        <subtask id="4.6">Configure query options: refetchInterval: 5000 (fallback polling)</subtask>
        <subtask id="4.7">Integrate with Supabase Realtime subscription</subtask>
      </task>
      <task id="5" title="Implement Realtime log streaming" acs="AC1.4.5">
        <subtask id="5.1">Open apps/web/lib/realtime-service.ts or create if missing</subtask>
        <subtask id="5.2">Add function: subscribeToLogs(jobId: string, onNewLog: (log: ActivityLog) =&gt; void): RealtimeChannel</subtask>
        <subtask id="5.3">Subscribe to activity_logs table with filter: job_id = jobId</subtask>
        <subtask id="5.4">Listen for INSERT events only</subtask>
        <subtask id="5.5">Transform database row to ActivityLog type</subtask>
        <subtask id="5.6">Call onNewLog callback with new log entry</subtask>
        <subtask id="5.7">Return channel for cleanup</subtask>
      </task>
      <task id="6" title="Integrate LiveActivityLog into job detail page" acs="ALL">
        <subtask id="6.1">Open apps/web/components/job-detail-client.tsx for editing</subtask>
        <subtask id="6.2">Import LiveActivityLog component</subtask>
        <subtask id="6.3">Add LiveActivityLog to page layout (below CurrentURLPanel or side panel)</subtask>
        <subtask id="6.4">Pass jobId prop to LiveActivityLog</subtask>
        <subtask id="6.5">Wrap in responsive grid: side panel on desktop, bottom panel on mobile</subtask>
        <subtask id="6.6">Verify real-time updates work with Supabase Realtime subscription</subtask>
      </task>
      <task id="7" title="Testing and verification" acs="ALL" tools="Chrome DevTools MCP, Supabase MCP">
        <subtask id="7.1">Navigate to job detail page with active job (Chrome DevTools)</subtask>
        <subtask id="7.2">Take snapshot to verify LiveActivityLog renders (Chrome DevTools)</subtask>
        <subtask id="7.3">Verify log entries display with timestamps and severity icons</subtask>
        <subtask id="7.4">Insert test log entry with severity "success" (Supabase MCP)</subtask>
        <subtask id="7.5">Verify log appears within 1 second (Chrome DevTools)</subtask>
        <subtask id="7.6">Insert test log entry with severity "error" (Supabase MCP)</subtask>
        <subtask id="7.7">Verify error log appears with red styling (Chrome DevTools)</subtask>
        <subtask id="7.8">Verify auto-scroll: latest log should be visible</subtask>
        <subtask id="7.9">Scroll up in log panel, verify "Jump to latest" button appears</subtask>
        <subtask id="7.10">Click "Jump to latest", verify scrolls to bottom</subtask>
        <subtask id="7.11">Test filter controls: select "Errors Only", verify only error logs shown</subtask>
        <subtask id="7.12">Test filter controls: select "Info Only", verify only info logs shown</subtask>
        <subtask id="7.13">Reset filter to "All", verify all logs shown</subtask>
        <subtask id="7.14">Test accessibility: keyboard navigation, ARIA labels, screen reader compatibility</subtask>
      </task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="AC1.4.1">Scrollable log panel displays activity feed with auto-scroll to latest</criterion>
    <criterion id="AC1.4.2">Each log entry shows: timestamp, severity icon, message</criterion>
    <criterion id="AC1.4.3">Severity levels: SUCCESS (✓ green), INFO (ℹ blue), WARNING (⚠ yellow), ERROR (✗ red)</criterion>
    <criterion id="AC1.4.4">Log entries include: URL fetch, pre-filter decisions, LLM calls, errors, cost updates</criterion>
    <criterion id="AC1.4.5">Logs stream in real-time with &lt;1 second latency</criterion>
    <criterion id="AC1.4.6">Auto-scroll can be paused by user scroll, resume with "Jump to latest" button</criterion>
    <criterion id="AC1.4.7">Log entries persist during session, cleared when job completed and viewed</criterion>
    <criterion id="AC1.4.8">Filter controls: "Show: All | Errors Only | Info Only"</criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>FR003: Live Activity Logs</section>
        <snippet>Users shall see a live scrolling log feed showing detailed activity logs for all operations including URL fetches, filtering decisions, LLM API calls, classification results, and errors - with timestamps and severity levels.</snippet>
      </doc>
      <doc>
        <path>docs/PRD.md</path>
        <title>Product Requirements Document</title>
        <section>NFR001: Real-Time UI Responsiveness</section>
        <snippet>Live logs stream with &lt;1 second latency. Progress indicators update at minimum 1Hz (once per second). UI remains responsive during processing of 10K+ URL batches. No manual refresh needed.</snippet>
      </doc>
      <doc>
        <path>docs/tech-spec-epic-1.md</path>
        <title>Technical Specification - Epic 1</title>
        <section>Story 1.4: Live Activity Log Streaming</section>
        <snippet>AC1.4.1-AC1.4.8 specifications include scrollable log panel with auto-scroll, severity levels (success/info/warning/error), real-time streaming (&lt;1s latency), auto-scroll pause/resume, filter controls. Components: ActivityLogFeed, LogEntry with unit and E2E testing requirements.</snippet>
      </doc>
      <doc>
        <path>docs/tech-spec-epic-1.md</path>
        <title>Technical Specification - Epic 1</title>
        <section>Data Models - ActivityLog Type</section>
        <snippet>ActivityLog interface: id (string), jobId (string), severity (LogSeverity: 'success'|'info'|'warning'|'error'), message (string), context (Record&lt;string,any&gt;|null - JSONB field), createdAt (string - ISO 8601 timestamp). Location: types/activity-log.ts with corresponding ActivityLogSchema in packages/shared/src/schemas/</snippet>
      </doc>
      <doc>
        <path>docs/solution-architecture.md</path>
        <title>Solution Architecture</title>
        <section>Real-Time Strategy: Supabase Realtime</section>
        <snippet>Supabase Realtime WebSocket subscriptions enable real-time updates. Flow: BullMQ Worker writes to Supabase PostgreSQL → triggers Realtime event → broadcasts to all subscribed clients via WebSocket → &lt;500ms latency. Frontend subscribes to activity_logs table INSERT events via subscribeToLogs(jobId, onInsert) function in realtime-service.ts.</snippet>
      </doc>
      <doc>
        <path>docs/solution-architecture.md</path>
        <title>Solution Architecture</title>
        <section>Frontend Hooks - useJobLogs</section>
        <snippet>useJobLogs(jobId: string, filters?: LogFilters) =&gt; UseQueryResult&lt;ActivityLog[]&gt; hook in apps/web/hooks/use-logs.ts. Integrates TanStack Query for data fetching with Supabase Realtime subscriptions for live updates.</snippet>
      </doc>
      <doc>
        <path>docs/ux-specification.md</path>
        <title>UX Specification</title>
        <section>Design Principles - Radical Transparency</section>
        <snippet>PRIMARY design goal is radical transparency - team members should see exactly what's happening at every moment: which URL is processing, what stage it's in, live logs, progress indicators, costs, and results. Every system action visible in real-time with clear explanations.</snippet>
      </doc>
      <doc>
        <path>docs/ux-specification.md</path>
        <title>UX Specification</title>
        <section>Component Layout</section>
        <snippet>Live Activity Log positioned as side panel or bottom panel in dashboard layout. Includes Log Stream, Filter Controls, and Auto-scroll Toggle. Responsive design: side panel on desktop, bottom panel on mobile.</snippet>
      </doc>
    </docs>
    <code>
      <file>
        <path>apps/web/lib/realtime-service.ts</path>
        <kind>service</kind>
        <symbol>subscribeToJob, subscribeToJobList, unsubscribe</symbol>
        <lines>1-108</lines>
        <reason>Existing Realtime service pattern - Story 1.4 needs to add subscribeToLogs() function following same pattern. Shows proper channel subscription, cleanup, and activeChannels tracking.</reason>
      </file>
      <file>
        <path>apps/web/hooks/use-jobs.ts</path>
        <kind>hook</kind>
        <symbol>useJob, useJobs</symbol>
        <lines>1-253</lines>
        <reason>Existing React Query hook pattern with Realtime integration. Story 1.4 should create useActivityLogs hook following this pattern: TanStack Query + Supabase Realtime subscription + proper cleanup + fallback polling (5s interval).</reason>
      </file>
      <file>
        <path>packages/shared/src/utils/format.ts</path>
        <kind>utility</kind>
        <symbol>formatDuration, formatNumber</symbol>
        <lines>1-71</lines>
        <reason>Shared format utilities - Story 1.4 needs formatTimestamp() function for log timestamps in HH:MM:SS format. Can extend this file or create similar pattern.</reason>
      </file>
      <file>
        <path>apps/web/components/job-detail-client.tsx</path>
        <kind>component</kind>
        <symbol>JobDetailClient</symbol>
        <lines>1-130</lines>
        <reason>Target integration point for LiveActivityLog component. Story 1.4 will add LiveActivityLog to this page layout (line 117-125 area, after CurrentURLPanel).</reason>
      </file>
      <file>
        <path>packages/shared/src/types/job.ts</path>
        <kind>types</kind>
        <symbol>Job, JobStatus, ProcessingStage</symbol>
        <lines>1-27</lines>
        <reason>Reference for type organization pattern. Story 1.4 needs to create activity-log.ts in same directory with ActivityLog interface and LogSeverity type.</reason>
      </file>
      <file>
        <path>apps/web/components/ui/card.tsx</path>
        <kind>ui-component</kind>
        <symbol>Card, CardHeader, CardTitle, CardContent</symbol>
        <lines>N/A</lines>
        <reason>shadcn/ui Card component already available - Story 1.4 LiveActivityLog can use Card for log panel container.</reason>
      </file>
    </code>
    <dependencies>
      <node>
        <package>@supabase/supabase-js</package>
        <version>^2.75.0</version>
        <purpose>Supabase JavaScript client for PostgreSQL queries and Realtime WebSocket subscriptions. Required for subscribeToLogs() function.</purpose>
      </node>
      <node>
        <package>@tanstack/react-query</package>
        <version>^5.90.2</version>
        <purpose>Data fetching and caching library. Required for useActivityLogs hook with refetchInterval fallback polling.</purpose>
      </node>
      <node>
        <package>lucide-react</package>
        <version>^0.545.0</version>
        <purpose>Icon library. Required icons: CheckCircle (success), Info (info), AlertTriangle (warning), XCircle (error).</purpose>
      </node>
      <node>
        <package>date-fns</package>
        <version>^3.6.0</version>
        <purpose>Date formatting utilities. Can be used for formatTimestamp() implementation if needed.</purpose>
      </node>
      <node>
        <package>zod</package>
        <version>^3.25.76</version>
        <purpose>Runtime validation library. Required for ActivityLogSchema in packages/shared/src/schemas/activity-log.ts.</purpose>
      </node>
      <node>
        <package>next</package>
        <version>14.2.15</version>
        <purpose>Next.js framework with App Router. Required for Server/Client Component patterns.</purpose>
      </node>
      <node>
        <package>react</package>
        <version>^18</version>
        <purpose>React library for component development. Required for LiveActivityLog and LogEntry components.</purpose>
      </node>
      <node>
        <package>tailwindcss</package>
        <version>^3.4.1</version>
        <purpose>CSS framework for styling. Required for severity colors (bg-green-50, bg-blue-50, bg-yellow-50, bg-red-50) and responsive design.</purpose>
      </node>
      <shadcn-ui>
        <component>ScrollArea</component>
        <purpose>Scrollable container for log panel with auto-scroll behavior. Note: May need to install if not present - check apps/web/components/ui/scroll-area.tsx</purpose>
      </shadcn-ui>
      <shadcn-ui>
        <component>Card, CardHeader, CardTitle, CardContent</component>
        <purpose>Card components for log panel container. Already installed (confirmed in ui/card.tsx).</purpose>
      </shadcn-ui>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint id="ARCH-001">Next.js 14.2+ with App Router - Use Server Components for layout, Client Components ("use client" directive) for real-time updates</constraint>
    <constraint id="ARCH-002">TypeScript 5.5+ strict mode - All new files must be TypeScript with proper type annotations</constraint>
    <constraint id="ARCH-003">Monorepo structure - Components in apps/web/components/, shared types in packages/shared/src/types/, shared schemas in packages/shared/src/schemas/</constraint>
    <constraint id="UI-001">shadcn/ui components required - Use ScrollArea for scrollable log panel, Card for containers, lucide-react icons (CheckCircle, Info, AlertTriangle, XCircle)</constraint>
    <constraint id="UI-002">WCAG 2.1 AA compliance - ARIA labels, semantic HTML, keyboard navigation support. Log panel: section with aria-label="Live Activity Log", each log entry: article tag</constraint>
    <constraint id="UI-003">Responsive design - Side panel on desktop, bottom panel on mobile using Tailwind breakpoints</constraint>
    <constraint id="STATE-001">TanStack Query v5 for data fetching - Use useQuery for log fetching with refetchInterval:5000 as fallback polling</constraint>
    <constraint id="STATE-002">Supabase Realtime for live streaming - Subscribe to activity_logs table INSERT events, target latency &lt;1 second (NFR001-P3)</constraint>
    <constraint id="STATE-003">Client-side filtering - Apply severity filter in component without additional API calls</constraint>
    <constraint id="REALTIME-001">Proper subscription cleanup - Use unsubscribe(channel), NOT unsubscribeAll() to avoid breaking other components' subscriptions (lesson from Story 1.2)</constraint>
    <constraint id="REALTIME-002">Fallback polling - 5-second refetchInterval if Realtime WebSocket fails (NFR001-R7 requirement)</constraint>
    <constraint id="TEST-001">Manual testing via Chrome DevTools MCP for functional verification - Component tests deferred for MVP velocity (following Stories 1.1, 1.2, 1.3 pattern)</constraint>
    <constraint id="TEST-002">Integration testing with Supabase MCP - Insert test logs, verify UI updates in real-time</constraint>
    <constraint id="BACKEND-001">Backend dependency - NestJS logs service must write to activity_logs table with all required fields (Epic 2 Story 2.5 coordination required)</constraint>
    <constraint id="PERF-001">Virtual scrolling if logs exceed 1000 entries - Use react-window or @tanstack/react-virtual (performance optimization)</constraint>
  </constraints>
  <interfaces>
    <interface>
      <name>ActivityLog</name>
      <kind>TypeScript interface</kind>
      <signature>
        interface ActivityLog {
          id: string;
          jobId: string;
          severity: LogSeverity;
          message: string;
          context: Record&lt;string, any&gt; | null;
          createdAt: string;
        }
        type LogSeverity = 'success' | 'info' | 'warning' | 'error';
      </signature>
      <path>packages/shared/src/types/activity-log.ts</path>
      <reason>NEW interface to create - Required for log data structure. Must include Zod schema in packages/shared/src/schemas/activity-log.ts</reason>
    </interface>
    <interface>
      <name>subscribeToLogs</name>
      <kind>Realtime subscription function</kind>
      <signature>
        function subscribeToLogs(
          jobId: string,
          onNewLog: (log: ActivityLog) =&gt; void
        ): RealtimeChannel
      </signature>
      <path>apps/web/lib/realtime-service.ts</path>
      <reason>NEW function to add - Subscribe to activity_logs table INSERT events filtered by job_id. Follow existing subscribeToJob pattern (lines 46-74).</reason>
    </interface>
    <interface>
      <name>useActivityLogs</name>
      <kind>React Query hook</kind>
      <signature>
        function useActivityLogs(
          jobId: string,
          filters?: { severity?: LogSeverity }
        ): UseQueryResult&lt;ActivityLog[]&gt;
      </signature>
      <path>apps/web/hooks/use-activity-logs.ts</path>
      <reason>NEW hook to create - Fetch logs from GET /api/jobs/:jobId/logs endpoint. Integrate with Realtime subscription using subscribeToLogs(). Return: { logs, isLoading, error, refetch }. Configure refetchInterval:5000 for fallback polling.</reason>
    </interface>
    <interface>
      <name>formatTimestamp</name>
      <kind>Utility function</kind>
      <signature>
        function formatTimestamp(isoString: string): string
      </signature>
      <path>packages/shared/src/utils/format.ts</path>
      <reason>NEW utility function to add - Format ISO 8601 timestamp to HH:MM:SS format for log display. Follow existing formatDuration pattern.</reason>
    </interface>
    <interface>
      <name>Supabase activity_logs table</name>
      <kind>Database table</kind>
      <signature>
        table: activity_logs
        columns: id (uuid PK), job_id (uuid FK), severity (text), message (text), context (jsonb), created_at (timestamptz)
      </signature>
      <path>Supabase PostgreSQL</path>
      <reason>Backend requirement - Table must exist with Realtime enabled. Backend (Epic 2 Story 2.5) must write logs to this table.</reason>
    </interface>
  </interfaces>
  <tests>
    <standards>
      Testing approach follows Stories 1.1, 1.2, 1.3 patterns: Manual testing via Chrome DevTools MCP for functional verification. Integration testing with Supabase MCP for real-time behavior. Component tests deferred for MVP velocity. E2E tests with Playwright deferred to later sprint.

      Testing frameworks: Jest 30.2.0 + React Testing Library 16.3.0 for unit tests (when needed). Chrome DevTools MCP for functional UI verification. Supabase MCP for database integration testing.

      Test execution: Run dev server → Chrome DevTools MCP navigate to /jobs/[test-job-id] → Take snapshot → Supabase MCP insert test logs → Chrome DevTools verify real-time UI updates → Test filter controls, auto-scroll, severity display → Document results with screenshots.
    </standards>
    <locations>
      - apps/web/hooks/__tests__/*.test.ts (pattern from existing use-current-url-timer.test.ts)
      - apps/web/components/__tests__/*.test.tsx (if component tests added later)
      - Manual testing via Chrome DevTools MCP (no file location - live browser testing)
      - Integration testing via Supabase MCP (direct database inserts for testing)
    </locations>
    <ideas>
      <test ac="AC1.4.1" priority="high">
        LiveActivityLog component renders: Navigate to /jobs/[test-job-id] with Chrome DevTools MCP → Take snapshot → Verify LiveActivityLog panel visible with scrollable area → Verify empty state shows "No logs yet" or similar message.
      </test>
      <test ac="AC1.4.2" priority="high">
        Log entry displays timestamp, severity icon, message: Insert test log via Supabase MCP → Chrome DevTools verify log entry shows HH:MM:SS timestamp, appropriate severity icon (CheckCircle/Info/AlertTriangle/XCircle), message text.
      </test>
      <test ac="AC1.4.3" priority="high">
        Severity levels display correct icons and colors: Insert 4 test logs (one per severity) via Supabase MCP → Chrome DevTools verify: success (✓ green bg-green-50), info (ℹ blue bg-blue-50), warning (⚠ yellow bg-yellow-50), error (✗ red bg-red-50).
      </test>
      <test ac="AC1.4.4" priority="high">
        Log entries include relevant activity types: Create test logs with messages: "URL fetch started: https://example.com", "Pre-filter PASS - Sending to LLM", "Gemini classification: SUITABLE (score: 0.87)", "ERROR - ScrapingBee 429 - Rate limit, retrying in 30s", "Cost update: $0.045" → Verify all display correctly.
      </test>
      <test ac="AC1.4.5" priority="critical">
        Real-time log streaming &lt;1 second latency: Start timer → Insert log via Supabase MCP → Chrome DevTools verify log appears in UI → Measure latency should be &lt;1000ms. Test fallback polling: Disable Realtime WebSocket → Verify logs still appear within 5 seconds (refetchInterval).
      </test>
      <test ac="AC1.4.6" priority="high">
        Auto-scroll behavior: Insert multiple logs → Verify auto-scroll to latest → Scroll up manually → Verify "Jump to latest" button appears → Click button → Verify scrolls to bottom → Insert new log → Verify auto-scroll resumes.
      </test>
      <test ac="AC1.4.7" priority="medium">
        Log persistence during session: Insert logs → Refresh page → Verify logs persist → Complete job and view → Verify logs cleared (or remain based on final design decision).
      </test>
      <test ac="AC1.4.8" priority="high">
        Filter controls work correctly: Insert 10 test logs (mixed severities) → Test "All" filter: verify all logs shown → Test "Errors Only": verify only error logs shown → Test "Info Only": verify only info logs shown → Verify client-side filtering (no API calls).
      </test>
      <test type="accessibility" priority="medium">
        WCAG 2.1 AA compliance: Verify section has aria-label="Live Activity Log" → Verify each log entry uses article tag → Verify keyboard navigation works (Tab through filter controls) → Verify focus indicators visible → Test with screen reader (VoiceOver/NVDA) for semantic HTML.
      </test>
      <test type="integration" priority="high">
        useActivityLogs hook integration: Verify hook fetches logs from Supabase → Verify Realtime subscription setup → Verify proper cleanup (unsubscribe on unmount) → Verify fallback polling works when Realtime fails.
      </test>
      <test type="performance" priority="medium">
        Virtual scrolling if &gt;1000 logs: Insert 1000+ test logs → Verify UI remains responsive → Measure scroll performance → If performance degrades, implement react-window or @tanstack/react-virtual.
      </test>
    </ideas>
  </tests>
</story-context>
