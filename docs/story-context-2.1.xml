<?xml version="1.0" encoding="UTF-8"?>
<story-context id="story-2.1-nestjs-backend-foundation" v="1.0">
  <metadata>
    <epicId>2</epicId>
    <storyId>1</storyId>
    <title>NestJS Backend Foundation &amp; Job Queue Setup</title>
    <status>Draft</status>
    <generatedAt>2025-10-14</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>docs/stories/story-2.1.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>developer</asA>
    <iWant>set up NestJS backend with BullMQ queue integration</iWant>
    <soThat>we have production-grade architecture for job processing</soThat>

    <tasks>
      <task id="1" acs="1">
        <description>Initialize NestJS Application</description>
        <subtasks>
          <subtask id="1.1">Create NestJS app in monorepo: apps/api/</subtask>
          <subtask id="1.2">Configure TypeScript with strict mode</subtask>
          <subtask id="1.3">Set up ESLint and Prettier</subtask>
          <subtask id="1.4">Configure package.json scripts (dev, build, start)</subtask>
          <subtask id="1.5">Add NestJS dependencies (@nestjs/core, @nestjs/common, @nestjs/platform-express)</subtask>
        </subtasks>
      </task>

      <task id="2" acs="2,3">
        <description>Configure BullMQ and Redis</description>
        <subtasks>
          <subtask id="2.1">Install BullMQ dependencies (bullmq, @nestjs/bullmq)</subtask>
          <subtask id="2.2">Set up Redis connection via environment variable (REDIS_URL)</subtask>
          <subtask id="2.3">Create BullMQ module in apps/api/src/queue/</subtask>
          <subtask id="2.4">Register "url-processing-queue" in NestJS</subtask>
          <subtask id="2.5">Configure queue options (concurrency, rate limiting)</subtask>
        </subtasks>
      </task>

      <task id="3" acs="4">
        <description>Set up Bull Board Dashboard</description>
        <subtasks>
          <subtask id="3.1">Install Bull Board dependencies (@bull-board/api, @bull-board/express)</subtask>
          <subtask id="3.2">Create Bull Board route at /admin/queues</subtask>
          <subtask id="3.3">Configure dashboard to display url-processing-queue</subtask>
          <subtask id="3.4">Test dashboard access in development</subtask>
        </subtasks>
      </task>

      <task id="4" acs="5">
        <description>Configure Supabase Client</description>
        <subtasks>
          <subtask id="4.1">Install Supabase dependencies (@supabase/supabase-js)</subtask>
          <subtask id="4.2">Create Supabase module in apps/api/src/supabase/</subtask>
          <subtask id="4.3">Configure environment variables (SUPABASE_URL, SUPABASE_SERVICE_KEY)</subtask>
          <subtask id="4.4">Export Supabase client for use across modules</subtask>
        </subtasks>
      </task>

      <task id="5" acs="6" mcp="supabase">
        <description>Create Database Schema</description>
        <subtasks>
          <subtask id="5.1">Create Supabase migration for jobs table</subtask>
          <subtask id="5.2">Create Supabase migration for results table</subtask>
          <subtask id="5.3">Create Supabase migration for activity_logs table</subtask>
          <subtask id="5.4">Apply migrations to Supabase project</subtask>
          <subtask id="5.5">Regenerate TypeScript types from Supabase schema</subtask>
        </subtasks>
      </task>

      <task id="6" acs="7">
        <description>Create Health Check Endpoint</description>
        <subtasks>
          <subtask id="6.1">Create HealthController in apps/api/src/health/</subtask>
          <subtask id="6.2">Implement GET /health endpoint</subtask>
          <subtask id="6.3">Return status: { status: 'ok', timestamp, uptime }</subtask>
          <subtask id="6.4">Test endpoint via curl/Postman</subtask>
        </subtasks>
      </task>

      <task id="7" acs="8">
        <description>Create Basic Job Endpoints</description>
        <subtasks>
          <subtask id="7.1">Create JobsModule in apps/api/src/jobs/</subtask>
          <subtask id="7.2">Create JobsController with POST /jobs and GET /jobs/:id</subtask>
          <subtask id="7.3">Create JobsService with basic CRUD operations</subtask>
          <subtask id="7.4">Implement POST /jobs - create job record in database</subtask>
          <subtask id="7.5">Implement GET /jobs/:id - fetch job by ID</subtask>
          <subtask id="7.6">Test endpoints with mock data</subtask>
        </subtasks>
      </task>

      <task id="8" acs="9,10">
        <description>Deploy to Railway</description>
        <subtasks>
          <subtask id="8.1">Create Railway project</subtask>
          <subtask id="8.2">Provision Redis addon in Railway</subtask>
          <subtask id="8.3">Configure environment variables in Railway dashboard</subtask>
          <subtask id="8.4">Set up GitHub integration for auto-deployment</subtask>
          <subtask id="8.5">Configure build command and start command</subtask>
          <subtask id="8.6">Deploy and verify health check endpoint</subtask>
          <subtask id="8.7">Test Bull Board dashboard access</subtask>
        </subtasks>
      </task>

      <task id="9" acs="ALL">
        <description>Integration Testing and Verification</description>
        <subtasks>
          <subtask id="9.1">Test health check endpoint returns 200 OK</subtask>
          <subtask id="9.2">Test POST /jobs creates job in Supabase</subtask>
          <subtask id="9.3">Test GET /jobs/:id returns job data</subtask>
          <subtask id="9.4">Test Bull Board dashboard displays queue</subtask>
          <subtask id="9.5">Test Redis connection (queue can accept jobs)</subtask>
          <subtask id="9.6">Verify Railway deployment is accessible</subtask>
          <subtask id="9.7">Document API endpoints and environment variables</subtask>
        </subtasks>
      </task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="AC1" priority="critical">
      <description>NestJS application initialized with TypeScript</description>
      <testIdea>Verify apps/api/ directory exists with main.ts, app.module.ts, and TypeScript configured with strict mode</testIdea>
    </criterion>

    <criterion id="AC2" priority="critical">
      <description>BullMQ configured with Redis connection (Railway managed Redis)</description>
      <testIdea>Verify Redis connection via environment variable REDIS_URL, test connection in health check</testIdea>
    </criterion>

    <criterion id="AC3" priority="critical">
      <description>Job queue created: "url-processing-queue"</description>
      <testIdea>Verify queue module exports url-processing-queue, test adding job to queue</testIdea>
    </criterion>

    <criterion id="AC4" priority="high">
      <description>Bull Board dashboard configured for dev monitoring (at /admin/queues)</description>
      <testIdea>Navigate to http://localhost:3001/admin/queues, verify dashboard shows url-processing-queue with stats</testIdea>
    </criterion>

    <criterion id="AC5" priority="critical">
      <description>Supabase client configured with environment variables</description>
      <testIdea>Verify Supabase module uses SUPABASE_URL and SUPABASE_SERVICE_KEY, test database query</testIdea>
    </criterion>

    <criterion id="AC6" priority="critical">
      <description>Database tables created: jobs, results (urls), activity_logs</description>
      <testIdea>Use Supabase MCP: list_tables, verify jobs, results, activity_logs exist with correct schema</testIdea>
    </criterion>

    <criterion id="AC7" priority="high">
      <description>Health check endpoint: GET /health</description>
      <testIdea>curl GET http://localhost:3001/health, verify returns 200 OK with { status: 'ok', timestamp, uptime }</testIdea>
    </criterion>

    <criterion id="AC8" priority="critical">
      <description>Basic job endpoints: POST /jobs (create), GET /jobs/:id (status)</description>
      <testIdea>curl POST /jobs with test data, verify job created in Supabase. curl GET /jobs/:id, verify returns job data</testIdea>
    </criterion>

    <criterion id="AC9" priority="high">
      <description>Deployed to Railway with auto-deployment on git push</description>
      <testIdea>Push commit to main branch, verify Railway auto-deploys. Check Railway logs for successful deployment</testIdea>
    </criterion>

    <criterion id="AC10" priority="high">
      <description>Environment variables configured in Railway</description>
      <testIdea>Verify Railway dashboard shows REDIS_URL, SUPABASE_URL, SUPABASE_SERVICE_KEY, PORT, NODE_ENV</testIdea>
    </criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="docs/PRD.md" title="Product Requirements Document" section="Goal 3">
        <snippet lines="67-68">
**Goal 3: Production-Grade Queue Architecture**
- NestJS + BullMQ replacing Python threading
- Job persistence, automatic retries, pause/resume capability
- Manageable by solo developer with beginner DevOps via Railway
        </snippet>
      </doc>

      <doc path="docs/tech-spec-epic-2.md" title="Epic 2 Technical Specification" section="Story 2.1">
        <snippet lines="364-375">
### Story 2.1: NestJS Backend Foundation &amp; Job Queue Setup
- AC2.1.1: NestJS application initialized with TypeScript
- AC2.1.2: BullMQ configured with Redis connection (Railway managed Redis)
- AC2.1.3: Job queue created: "url-processing-queue"
- AC2.1.4: Bull Board dashboard configured for dev monitoring (at /admin/queues)
- AC2.1.5: Supabase client configured with environment variables
- AC2.1.6: Database tables created: jobs, results (urls), activity_logs
- AC2.1.7: Health check endpoint: GET /health
- AC2.1.8: Basic job endpoints: POST /jobs (create), GET /jobs/:id (status)
- AC2.1.9: Deployed to Railway with auto-deployment on git push
- AC2.1.10: Environment variables configured in Railway
        </snippet>
      </doc>

      <doc path="docs/solution-architecture.md" title="Solution Architecture" section="Backend Stack">
        <snippet lines="1655-1662">
#### Backend Stack
- **Framework:** NestJS + TypeScript
- **Task Queue:** BullMQ + Redis (Railway managed)
- **Database:** Supabase (PostgreSQL + Realtime, NO Auth)
- **Validation:** Zod (via nestjs-zod)
- **Logging:** Pino (via nestjs-pino)
- **API Docs:** OpenAPI/Swagger (NestJS built-in)
- **Testing:** Jest + Supertest
        </snippet>
      </doc>

      <doc path="docs/solution-architecture.md" title="Solution Architecture" section="Database Schema - jobs table">
        <snippet lines="2709-2742">
CREATE TABLE jobs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(255),
  status VARCHAR(50) NOT NULL DEFAULT 'pending',
  total_urls INTEGER NOT NULL DEFAULT 0,
  processed_urls INTEGER NOT NULL DEFAULT 0,
  successful_urls INTEGER NOT NULL DEFAULT 0,
  failed_urls INTEGER NOT NULL DEFAULT 0,
  rejected_urls INTEGER NOT NULL DEFAULT 0,
  current_url TEXT,
  current_stage VARCHAR(50),
  current_url_started_at TIMESTAMPTZ,
  progress_percentage DECIMAL(5,2) DEFAULT 0,
  processing_rate DECIMAL(10,2),
  estimated_time_remaining INTEGER,
  total_cost DECIMAL(10,4) DEFAULT 0,
  gemini_cost DECIMAL(10,4) DEFAULT 0,
  gpt_cost DECIMAL(10,4) DEFAULT 0,
  avg_cost_per_url DECIMAL(10,4),
  projected_total_cost DECIMAL(10,4),
  started_at TIMESTAMPTZ,
  completed_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
        </snippet>
      </doc>

      <doc path="docs/solution-architecture.md" title="Solution Architecture" section="Database Schema - results table">
        <snippet lines="2747-2776">
CREATE TABLE results (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  job_id UUID NOT NULL REFERENCES jobs(id) ON DELETE CASCADE,
  url TEXT NOT NULL,
  status VARCHAR(50) NOT NULL,
  classification_result VARCHAR(50),
  classification_score DECIMAL(3,2),
  classification_reasoning TEXT,
  llm_provider VARCHAR(20),
  llm_cost DECIMAL(10,6) DEFAULT 0,
  processing_time_ms INTEGER,
  retry_count INTEGER DEFAULT 0,
  error_message TEXT,
  scraped_content_length INTEGER,
  processed_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
        </snippet>
      </doc>

      <doc path="docs/solution-architecture.md" title="Solution Architecture" section="Database Schema - activity_logs table">
        <snippet lines="2781-2801">
CREATE TABLE activity_logs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  job_id UUID NOT NULL REFERENCES jobs(id) ON DELETE CASCADE,
  severity VARCHAR(20) NOT NULL,
  message TEXT NOT NULL,
  context JSONB,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
        </snippet>
      </doc>

      <doc path="docs/tech-spec-epic-2.md" title="Epic 2 Technical Specification" section="Services and Modules">
        <snippet lines="79-91">
| Module/Service | Responsibility | Location | Key Exports |
|---|---|---|---|
| **Jobs Module** | Job CRUD operations, job control (pause/resume/cancel) | `apps/api/src/jobs/` | `JobsController`, `JobsService` |
| **Queue Module** | BullMQ queue configuration, job dispatching | `apps/api/src/queue/` | `QueueService`, `QueueProcessor` |
| **Worker Module** | URL processing worker, orchestrates scraping → filtering → classification | `apps/api/src/workers/` | `UrlWorker`, `WorkerService` |
| **Scraper Service** | ScrapingBee API integration, content extraction | `apps/api/src/scraper/` | `ScraperService` |
| **Filter Service** | Intelligent pre-filtering with regex rules | `apps/api/src/filter/` | `FilterService`, `FilterRules` |
| **LLM Service** | Gemini + GPT classification with fallback logic | `apps/api/src/llm/` | `LLMService`, `GeminiProvider`, `GPTProvider` |
| **Cost Service** | LLM cost calculation and tracking | `apps/api/src/cost/` | `CostService` |
| **Database Module** | Supabase client, database operations | `apps/api/src/database/` | `DatabaseService`, `supabaseClient` |
| **Logger Module** | Pino structured logging configuration | `apps/api/src/logger/` | `LoggerService` |
| **Health Module** | Health check endpoints for Railway | `apps/api/src/health/` | `HealthController` |
        </snippet>
      </doc>

      <doc path="docs/epic-stories.md" title="Epic Stories Breakdown" section="Story 2.1">
        <snippet lines="217-240">
### Story 2.1: NestJS Backend Foundation &amp; Job Queue Setup

**As a** developer
**I want to** set up NestJS backend with BullMQ queue integration
**So that** we have production-grade architecture for job processing

**Acceptance Criteria:**
- [ ] NestJS application initialized with TypeScript
- [ ] BullMQ configured with Redis connection (Railway managed Redis)
- [ ] Job queue created: "url-processing-queue"
- [ ] Bull Board dashboard configured for dev monitoring (at /admin/queues)
- [ ] Supabase client configured with environment variables
- [ ] Database tables created: jobs, results (urls), activity_logs
- [ ] Health check endpoint: GET /health
- [ ] Basic job endpoints: POST /jobs (create), GET /jobs/:id (status)
- [ ] Deployed to Railway with auto-deployment on git push
- [ ] Environment variables configured in Railway

**Story Points:** 5
**Dependencies:** None (foundation story)
**Tags:** #backend #infrastructure #nestjs #bullmq #railway
        </snippet>
      </doc>
    </docs>

    <code>
      <code path="packages/shared/src/types/job.ts" kind="types" symbol="Job" lines="1-28" reason="Job type structure - backend must match this interface when creating/updating jobs"/>

      <code path="packages/shared/src/types/result.ts" kind="types" symbol="Result" lines="1-8" reason="Result type structure - backend must implement results table matching this type"/>

      <code path="packages/shared/src/types/activity-log.ts" kind="types" symbol="ActivityLog" lines="1-10" reason="ActivityLog type structure - backend must implement activity_logs table matching this type"/>

      <code path="apps/web/lib/api-client.ts" kind="client" symbol="apiClient" lines="1-77" reason="Frontend API client - backend must implement matching endpoints (POST /jobs, GET /jobs/:id)"/>

      <code path="packages/shared/src/schemas/job.ts" kind="schema" reason="Job Zod schema - backend can use for validation"/>
    </code>

    <dependencies>
      <dep ecosystem="npm" package="@nestjs/core" version="^10.3.0" reason="NestJS framework core"/>
      <dep ecosystem="npm" package="@nestjs/common" version="^10.3.0" reason="NestJS common utilities and decorators"/>
      <dep ecosystem="npm" package="@nestjs/platform-express" version="^10.3.0" reason="Express adapter for NestJS"/>
      <dep ecosystem="npm" package="bullmq" version="^5.10.0" reason="Redis-based job queue for URL processing"/>
      <dep ecosystem="npm" package="@nestjs/bullmq" version="^10.1.0" reason="NestJS integration for BullMQ"/>
      <dep ecosystem="npm" package="ioredis" version="^5.4.0" reason="Redis client (BullMQ dependency)"/>
      <dep ecosystem="npm" package="@supabase/supabase-js" version="^2.45.0" reason="Supabase client for database operations"/>
      <dep ecosystem="npm" package="@bull-board/express" version="^5.21.0" reason="Bull Board UI for queue monitoring"/>
      <dep ecosystem="npm" package="@bull-board/api" version="^5.21.0" reason="Bull Board API"/>
      <dep ecosystem="npm" package="reflect-metadata" version="^0.2.0" reason="Metadata reflection for decorators"/>
      <dep ecosystem="npm" package="rxjs" version="^7.8.0" reason="Reactive extensions (NestJS dependency)"/>
      <dep ecosystem="npm" package="typescript" version="^5.5.0" reason="TypeScript compiler"/>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint category="architecture" rule="Monorepo structure: Backend in apps/api/, shared types in packages/shared/"/>
    <constraint category="architecture" rule="NestJS 10+ with TypeScript 5.5+ strict mode"/>
    <constraint category="architecture" rule="Module-based architecture: Each feature as a NestJS module"/>
    <constraint category="architecture" rule="Dependency injection for all services"/>

    <constraint category="queue" rule="BullMQ 5.0+ for job queue (Redis-based)"/>
    <constraint category="queue" rule="Railway managed Redis (no local Redis setup)"/>
    <constraint category="queue" rule="Queue name: url-processing-queue"/>
    <constraint category="queue" rule="Bull Board for visual queue monitoring at /admin/queues"/>

    <constraint category="database" rule="Supabase PostgreSQL for persistence"/>
    <constraint category="database" rule="Supabase client with SERVICE_ROLE key (bypass RLS)"/>
    <constraint category="database" rule="Database migrations via Supabase MCP apply_migration"/>
    <constraint category="database" rule="TypeScript types must match shared types from Epic 1"/>
    <constraint category="database" rule="Enable Realtime on all tables (jobs, results, activity_logs)"/>

    <constraint category="api" rule="RESTful API endpoints following naming conventions"/>
    <constraint category="api" rule="POST /jobs - create new job"/>
    <constraint category="api" rule="GET /jobs/:id - get job by ID"/>
    <constraint category="api" rule="GET /health - health check for Railway"/>
    <constraint category="api" rule="JSON request/response format"/>

    <constraint category="deployment" rule="Platform: Railway (PaaS)"/>
    <constraint category="deployment" rule="Auto-deployment: Git push to main triggers deployment"/>
    <constraint category="deployment" rule="Environment variables: Set in Railway dashboard"/>
    <constraint category="deployment" rule="Build: npm run build in monorepo root"/>
    <constraint category="deployment" rule="Start: npm run start:prod for production"/>

    <constraint category="environment" rule="REDIS_URL - Railway managed Redis connection string"/>
    <constraint category="environment" rule="SUPABASE_URL - Supabase project URL"/>
    <constraint category="environment" rule="SUPABASE_SERVICE_KEY - Service role key (bypass RLS)"/>
    <constraint category="environment" rule="PORT - API port (Railway assigns, default 3001 for dev)"/>
    <constraint category="environment" rule="NODE_ENV - Environment mode (production/development)"/>

    <constraint category="testing" rule="Manual API testing via curl/Postman for endpoints"/>
    <constraint category="testing" rule="Visual verification of Bull Board dashboard"/>
    <constraint category="testing" rule="Supabase MCP for database verification"/>
    <constraint category="testing" rule="Railway deployment verification via health check"/>
    <constraint category="testing" rule="Unit tests deferred for MVP velocity"/>
  </constraints>

  <interfaces>
    <interface name="POST /jobs" kind="api" signature="POST /jobs { name?: string, urls: string[] } -&gt; { id: string, name: string | null, status: JobStatus, totalUrls: number, ... }" path="apps/api/src/jobs/jobs.controller.ts" description="Create new job - initial implementation accepts job metadata for Story 2.1, Story 2.2 will add URL upload"/>

    <interface name="GET /jobs/:id" kind="api" signature="GET /jobs/:id -&gt; { id: string, name: string | null, status: JobStatus, totalUrls: number, processedUrls: number, ... }" path="apps/api/src/jobs/jobs.controller.ts" description="Get job by ID - returns Job object matching shared Job type"/>

    <interface name="GET /health" kind="api" signature="GET /health -&gt; { status: 'ok' | 'error', timestamp: string, uptime: number, redis?: boolean, database?: boolean }" path="apps/api/src/health/health.controller.ts" description="Health check endpoint for Railway monitoring"/>

    <interface name="JobsService.create" kind="service" signature="create(data: CreateJobDto): Promise&lt;Job&gt;" path="apps/api/src/jobs/jobs.service.ts" description="Create job record in Supabase jobs table"/>

    <interface name="JobsService.findById" kind="service" signature="findById(id: string): Promise&lt;Job | null&gt;" path="apps/api/src/jobs/jobs.service.ts" description="Find job by ID from Supabase"/>

    <interface name="QueueService" kind="service" signature="class QueueService { addJob(data: any): Promise&lt;BullJob&gt;; getQueue(): Queue; }" path="apps/api/src/queue/queue.service.ts" description="BullMQ queue service for managing url-processing-queue"/>

    <interface name="SupabaseService" kind="service" signature="class SupabaseService { getClient(): SupabaseClient; }" path="apps/api/src/supabase/supabase.service.ts" description="Supabase client wrapper for database operations"/>

    <interface name="Job" kind="type" signature="interface Job { id: string; name: string | null; status: JobStatus; totalUrls: number; processedUrls: number; ... }" path="packages/shared/src/types/job.ts" description="Shared Job type - backend must match this structure"/>

    <interface name="JobStatus" kind="type" signature="type JobStatus = 'pending' | 'processing' | 'paused' | 'completed' | 'failed' | 'cancelled'" path="packages/shared/src/types/job.ts" description="Job status enum"/>

    <interface name="ProcessingStage" kind="type" signature="type ProcessingStage = 'fetching' | 'filtering' | 'classifying'" path="packages/shared/src/types/job.ts" description="Processing stage enum"/>
  </interfaces>

  <tests>
    <standards>
      <standard>Manual API testing via curl/Postman for functional verification</standard>
      <standard>Visual verification of Bull Board dashboard at /admin/queues</standard>
      <standard>Supabase MCP for database table verification (list_tables, execute_sql)</standard>
      <standard>Railway deployment verification via health check endpoint</standard>
      <standard>All 10 acceptance criteria must pass functional testing</standard>
      <standard>Integration tests deferred for MVP velocity</standard>
      <standard>Test with mock job data: { name: "Test Job", totalUrls: 100 }</standard>
    </standards>

    <locations>
      <location path="apps/api/test/" description="Jest integration tests (deferred)"/>
      <location path="apps/api/src/**/*.spec.ts" description="Unit tests co-located with source files (deferred)"/>
    </locations>

    <ideas>
      <testIdea ac="AC1" tool="bash">
        <description>Verify NestJS application structure and TypeScript configuration</description>
        <steps>
          <step>ls apps/api/ - verify directory exists</step>
          <step>cat apps/api/src/main.ts - verify NestJS bootstrap code</step>
          <step>cat apps/api/tsconfig.json - verify strict: true</step>
          <step>npm run build --workspace=apps/api - verify TypeScript compiles without errors</step>
        </steps>
      </testIdea>

      <testIdea ac="AC2,AC3" tool="bash">
        <description>Test BullMQ and Redis configuration</description>
        <steps>
          <step>Verify REDIS_URL environment variable is set</step>
          <step>Start NestJS app: npm run dev --workspace=apps/api</step>
          <step>Check logs for "Redis connected" message</step>
          <step>Check logs for "url-processing-queue registered" message</step>
        </steps>
      </testIdea>

      <testIdea ac="AC4" tool="bash">
        <description>Test Bull Board dashboard access</description>
        <steps>
          <step>Start NestJS app: npm run dev --workspace=apps/api</step>
          <step>Open browser to http://localhost:3001/admin/queues</step>
          <step>Verify dashboard loads with url-processing-queue visible</step>
          <step>Verify queue shows 0 jobs waiting, 0 active, 0 completed</step>
        </steps>
      </testIdea>

      <testIdea ac="AC5" tool="supabase">
        <description>Test Supabase client configuration</description>
        <steps>
          <step>Verify SUPABASE_URL and SUPABASE_SERVICE_KEY environment variables set</step>
          <step>Start NestJS app</step>
          <step>Check logs for "Supabase connected" message</step>
          <step>Use Supabase MCP: get_project_url - verify matches SUPABASE_URL</step>
        </steps>
      </testIdea>

      <testIdea ac="AC6" tool="supabase">
        <description>Test database tables created</description>
        <steps>
          <step>Use Supabase MCP: list_tables()</step>
          <step>Verify "jobs" table exists</step>
          <step>Verify "results" table exists</step>
          <step>Verify "activity_logs" table exists</step>
          <step>Use execute_sql: SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'jobs'</step>
          <step>Verify jobs table has columns: id, name, status, total_urls, processed_urls, etc.</step>
        </steps>
      </testIdea>

      <testIdea ac="AC7" tool="bash">
        <description>Test health check endpoint</description>
        <steps>
          <step>Start NestJS app: npm run dev --workspace=apps/api</step>
          <step>curl -X GET http://localhost:3001/health</step>
          <step>Verify HTTP 200 response</step>
          <step>Verify JSON response: { "status": "ok", "timestamp": "...", "uptime": ... }</step>
          <step>Verify timestamp is recent (within 1 second)</step>
        </steps>
      </testIdea>

      <testIdea ac="AC8" tool="bash,supabase">
        <description>Test basic job endpoints</description>
        <steps>
          <step>Start NestJS app: npm run dev --workspace=apps/api</step>
          <step>curl -X POST http://localhost:3001/jobs -H "Content-Type: application/json" -d '{"name":"Test Job","totalUrls":100}'</step>
          <step>Verify HTTP 201 response with job ID</step>
          <step>Save job ID from response</step>
          <step>Use Supabase MCP: execute_sql("SELECT * FROM jobs WHERE name = 'Test Job'")</step>
          <step>Verify job record exists in database with status = 'pending'</step>
          <step>curl -X GET http://localhost:3001/jobs/[job-id]</step>
          <step>Verify HTTP 200 response with job data matching database record</step>
        </steps>
      </testIdea>

      <testIdea ac="AC9" tool="bash">
        <description>Test Railway deployment and auto-deployment</description>
        <steps>
          <step>Commit changes: git add ., git commit -m "feat: Story 2.1 - NestJS backend foundation"</step>
          <step>Push to main: git push origin main</step>
          <step>Open Railway dashboard, verify deployment triggered automatically</step>
          <step>Monitor Railway logs for "Deployment successful" message</step>
          <step>Wait for deployment to complete (2-5 minutes)</step>
          <step>Get Railway public URL from dashboard</step>
          <step>curl -X GET https://[railway-url]/health</step>
          <step>Verify health check returns 200 OK from production</step>
        </steps>
      </testIdea>

      <testIdea ac="AC10" tool="bash">
        <description>Verify Railway environment variables</description>
        <steps>
          <step>Open Railway dashboard for backend project</step>
          <step>Navigate to Variables tab</step>
          <step>Verify REDIS_URL is set (auto-generated by Railway Redis addon)</step>
          <step>Verify SUPABASE_URL is set</step>
          <step>Verify SUPABASE_SERVICE_KEY is set</step>
          <step>Verify PORT is set (Railway auto-assigns or use 3001)</step>
          <step>Verify NODE_ENV is set to "production"</step>
        </steps>
      </testIdea>

      <testIdea ac="ALL" tool="bash,supabase">
        <description>End-to-end integration test</description>
        <steps>
          <step>Start NestJS app locally: npm run dev --workspace=apps/api</step>
          <step>Test health check: curl http://localhost:3001/health - expect 200 OK</step>
          <step>Test Bull Board: open http://localhost:3001/admin/queues - verify dashboard loads</step>
          <step>Test job creation: curl -X POST http://localhost:3001/jobs -d '{"name":"E2E Test","totalUrls":50}'</step>
          <step>Use Supabase MCP: execute_sql("SELECT * FROM jobs WHERE name = 'E2E Test'")</step>
          <step>Verify job in database with correct structure</step>
          <step>Test job retrieval: curl -X GET http://localhost:3001/jobs/[job-id]</step>
          <step>Verify response matches database record</step>
          <step>Check Bull Board - verify no errors in queue</step>
          <step>Document all API endpoints and environment variables in Story 2.1 completion notes</step>
        </steps>
      </testIdea>
    </ideas>
  </tests>

  <integration>
    <integrationPoint>
      <component>packages/shared/src/types/</component>
      <description>Backend must implement Job, Result, ActivityLog types from shared package</description>
      <modification>Import shared types in backend services to ensure type compatibility</modification>
    </integrationPoint>

    <integrationPoint>
      <component>apps/web/lib/api-client.ts</component>
      <description>Frontend expects POST /jobs and GET /jobs/:id endpoints</description>
      <modification>Backend JobsController must implement these endpoints with matching request/response formats</modification>
    </integrationPoint>

    <integrationPoint>
      <component>Supabase Database</component>
      <description>Backend writes to jobs, results, activity_logs tables that frontend reads via Realtime</description>
      <modification>Database schema must match TypeScript types from shared package exactly</modification>
    </integrationPoint>

    <integrationPoint>
      <component>Railway Deployment</component>
      <description>Backend deployed separately from frontend, connected via NEXT_PUBLIC_API_URL</description>
      <modification>Configure CORS to allow frontend domain, set Railway environment variables</modification>
    </integrationPoint>
  </integration>

  <references>
    <reference source="docs/stories/story-2.1.md" section="full" description="Complete story specification with all tasks and subtasks"/>
    <reference source="docs/tech-spec-epic-2.md" section="Story 2.1" lines="364-375" description="Detailed AC mapping (AC2.1.1-AC2.1.10)"/>
    <reference source="docs/tech-spec-epic-2.md" section="Services and Modules" lines="79-91" description="NestJS module architecture and responsibilities"/>
    <reference source="docs/solution-architecture.md" section="Backend Stack" lines="1655-1662" description="Technology stack decisions"/>
    <reference source="docs/solution-architecture.md" section="Database Schema" lines="2709-2801" description="Complete database schema (jobs, results, activity_logs tables)"/>
    <reference source="docs/PRD.md" section="Goal 3" lines="67-68" description="Production-Grade Queue Architecture requirement"/>
    <reference source="packages/shared/src/types/job.ts" section="full" description="Job TypeScript type - backend must match"/>
    <reference source="packages/shared/src/types/result.ts" section="full" description="Result TypeScript type - backend must match"/>
    <reference source="packages/shared/src/types/activity-log.ts" section="full" description="ActivityLog TypeScript type - backend must match"/>
    <reference source="apps/web/lib/api-client.ts" section="jobsApi" lines="47-77" description="Frontend API client expectations"/>
  </references>

  <notes>
    <note category="architecture">
      Story 2.1 is the foundation story for Epic 2 - no dependencies on other stories. Establishes backend infrastructure that Stories 2.2-2.5 will build upon.
    </note>

    <note category="monorepo">
      Backend in apps/api/, shared types in packages/shared/. Use Turborepo for monorepo management. Frontend already exists in apps/web/.
    </note>

    <note category="new-files">
      Major new directory: apps/api/ with complete NestJS application structure. See Dev Notes in story for detailed file tree.
    </note>

    <note category="database-migrations">
      Create Supabase migrations for 3 tables: jobs, results, activity_logs. Use Supabase MCP apply_migration for applying SQL. Enable Realtime on all tables.
    </note>

    <note category="shared-types">
      Backend must import and use Job, Result, ActivityLog types from packages/shared/ to ensure type compatibility with frontend.
    </note>

    <note category="testing-approach">
      Manual testing via curl/Postman for API endpoints. Visual verification of Bull Board dashboard. Supabase MCP for database verification. Railway deployment testing via health check.
    </note>

    <note category="deployment">
      Railway PaaS with auto-deployment on git push. Separate deployments for frontend (apps/web) and backend (apps/api). Railway managed Redis addon for BullMQ.
    </note>

    <note category="environment-variables">
      Required: REDIS_URL (Railway auto-generates), SUPABASE_URL, SUPABASE_SERVICE_KEY, PORT (Railway assigns), NODE_ENV. Configure in Railway dashboard.
    </note>

    <note category="bull-board">
      Development tool at /admin/queues for visual queue monitoring. Shows url-processing-queue with job stats, failed jobs, retry counts. Essential for debugging queue issues.
    </note>

    <note category="epic-2-foundation">
      Story 2.1 provides infrastructure for Stories 2.2-2.5. Story 2.2 (URL Upload) will use POST /jobs endpoint. Story 2.5 (Worker) will consume from url-processing-queue. All Epic 2 stories depend on database schema created here.
    </note>
  </notes>
</story-context>
