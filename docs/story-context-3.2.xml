<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>3</epicId>
    <storyId>2</storyId>
    <title>Railway Production Deployment & Configuration</title>
    <status>Draft</status>
    <generatedAt>2025-10-17</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/Users/s0mebody/Desktop/dev/projects/website-scraper-project/docs/stories/story-3.2.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>developer</asA>
    <iWant>deploy the application to Railway production environment with NestJS API, managed Redis, Next.js Frontend, Supabase production database, environment variables, auto-deploy configuration, health checks, graceful shutdown handling, CORS, and production validation</iWant>
    <soThat>the team can use the system for actual URL classification work with production-grade reliability, monitoring, and zero-DevOps deployment complexity</soThat>
    <tasks>
      <task id="1" title="Railway Project Setup & GitHub Integration" effort="1 hour" acceptanceCriteria="AC1, AC5">
        Create Railway account, install CLI, initialize project, link to GitHub repository, configure auto-deploy on main branch
      </task>
      <task id="2" title="Railway Services Configuration" effort="1.5 hours" acceptanceCriteria="AC2">
        Create Redis service (managed), NestJS API service, Next.js Frontend service, configure service networking and domains
      </task>
      <task id="3" title="Supabase Production Database Setup" effort="1 hour" acceptanceCriteria="AC3">
        Verify Supabase production project, apply all database migrations, copy production connection strings
      </task>
      <task id="4" title="Environment Variables Configuration" effort="1 hour" acceptanceCriteria="AC4">
        Configure API service environment variables (DATABASE_URL, REDIS_URL, LLM API keys, Supabase keys), Frontend environment variables
      </task>
      <task id="5" title="Build Configuration & Deployment Testing" effort="1.5 hours" acceptanceCriteria="AC6">
        Create/verify nixpacks.toml, verify monorepo build configuration, trigger first deployment, monitor Railway logs
      </task>
      <task id="6" title="Health Check & Service Validation" effort="1 hour" acceptanceCriteria="AC7, AC8">
        Test API health endpoint, verify all services connected (database, Redis), test Frontend accessibility, verify CORS working
      </task>
      <task id="7" title="Environment Validation & Fail-Fast Testing" effort="30 minutes" acceptanceCriteria="AC9">
        Verify startup validation in API code, test fail-fast behavior with missing env vars
      </task>
      <task id="8" title="Logging & Monitoring Setup" effort="30 minutes" acceptanceCriteria="AC10">
        Verify Pino logger configured, test log output in Railway, test log filtering
      </task>
      <task id="9" title="Production Domain & CORS Configuration" effort="30 minutes" acceptanceCriteria="AC11, AC12">
        Copy Railway-generated domains, update CORS configuration in API, verify CORS working
      </task>
      <task id="10" title="Graceful Shutdown Testing" effort="30 minutes" acceptanceCriteria="AC13">
        Verify graceful shutdown logic in API, test during processing, verify job resumption after redeployment
      </task>
      <task id="11" title="Production Deployment Runbook Documentation" effort="1 hour">
        Create docs/deployment-runbook.md with deployment steps, rollback procedure, common issues, monitoring guidance
      </task>
      <task id="12" title="Final Deployment Verification Checklist" effort="30 minutes">
        Verify all ACs satisfied, smoke test production environment, document production details, share URLs with team
      </task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="AC1" priority="high">
      <title>Railway project created and linked to GitHub repository</title>
      <description>Railway project initialized, GitHub repository linked, webhook configured for auto-deployment</description>
    </criterion>
    <criterion id="AC2" priority="high">
      <title>Railway services configured: NestJS API, Redis (managed), Frontend</title>
      <description>Three services running: API with public domain, Redis accessible via internal network, Frontend with public domain</description>
    </criterion>
    <criterion id="AC3" priority="high">
      <title>Supabase production database configured with proper schema</title>
      <description>All migrations applied to Supabase production, tables verified (jobs, results, logs, classification_settings)</description>
    </criterion>
    <criterion id="AC4" priority="high">
      <title>Environment variables configured in Railway</title>
      <description>API: SCRAPINGBEE_API_KEY, GEMINI_API_KEY, OPENAI_API_KEY, REDIS_URL, DATABASE_URL, SUPABASE keys, FRONTEND_URL. Frontend: NEXT_PUBLIC_API_URL, NEXT_PUBLIC_SUPABASE keys</description>
    </criterion>
    <criterion id="AC5" priority="high">
      <title>Railway auto-deploy configured</title>
      <description>GitHub webhook created, auto-deployment enabled on main branch, deployment triggered by git push verified</description>
    </criterion>
    <criterion id="AC6" priority="high">
      <title>Build succeeds in Railway environment</title>
      <description>nixpacks.toml properly configured, build completes successfully, services start without errors</description>
    </criterion>
    <criterion id="AC7" priority="high">
      <title>Health check endpoint accessible</title>
      <description>GET /health returns 200 with JSON response including database and Redis connection status</description>
    </criterion>
    <criterion id="AC8" priority="high">
      <title>Application starts successfully with all services connected</title>
      <description>API logs show successful startup, database/Redis connected, Frontend accessible and loads dashboard</description>
    </criterion>
    <criterion id="AC9" priority="high">
      <title>Environment validation runs at startup</title>
      <description>API validates required env vars, crashes immediately with clear error if any missing, logs show validation errors</description>
    </criterion>
    <criterion id="AC10" priority="medium">
      <title>Railway logs accessible and structured</title>
      <description>Pino logger configured, structured JSON logs visible in Railway, log filtering by level works</description>
    </criterion>
    <criterion id="AC11" priority="high">
      <title>Domain generated for API access</title>
      <description>Railway-generated API and Frontend domains accessible</description>
    </criterion>
    <criterion id="AC12" priority="high">
      <title>CORS configured for production domain</title>
      <description>API CORS includes Frontend domain, API requests from Frontend succeed without CORS errors</description>
    </criterion>
    <criterion id="AC13" priority="high">
      <title>Graceful shutdown tested</title>
      <description>SIGTERM handler implemented, current URL completes before shutdown, job resumes after redeployment</description>
    </criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc id="doc-1">
        <path>/Users/s0mebody/Desktop/dev/projects/website-scraper-project/docs/PRD.md</path>
        <title>Product Requirements Document - Deployment Intent</title>
        <section>Deployment Intent (lines 28-38)</section>
        <snippet>Production Internal Tool - Deploying production-ready collaborative scraping platform on Railway: No authentication, Multiple concurrent users, Production LLM APIs, ScrapingBee 250K credits/month, Budget $130-150/month</snippet>
        <reason>Defines production deployment requirements and budget constraints</reason>
      </doc>
      <doc id="doc-2">
        <path>/Users/s0mebody/Desktop/dev/projects/website-scraper-project/docs/PRD.md</path>
        <title>NFR005: Solo Developer Maintainability</title>
        <section>NFR005 (lines 182-185)</section>
        <snippet>Zero manual server configuration (Railway managed services only), Comprehensive logging (Railway logs + in-app logs), TypeScript for type safety, Railway automatic deployments on git push</snippet>
        <reason>Defines zero-DevOps deployment requirements</reason>
      </doc>
      <doc id="doc-3">
        <path>/Users/s0mebody/Desktop/dev/projects/website-scraper-project/apps/api/RAILWAY_DEPLOYMENT.md</path>
        <title>Railway Deployment Guide</title>
        <section>Complete deployment guide</section>
        <snippet>Railway project ID: 6c5c7374-8429-4498-96fa-3c0318391636, Redis deployed with internal URL, Environment variables template, Deployment steps, Verification commands, Troubleshooting guide</snippet>
        <reason>Existing Railway configuration and setup instructions</reason>
      </doc>
      <doc id="doc-4">
        <path>/Users/s0mebody/Desktop/dev/projects/website-scraper-project/docs/stories/story-3.2.md</path>
        <title>Story 3.2 Dev Notes - Railway Architecture</title>
        <section>Railway Architecture (lines 334-354)</section>
        <snippet>Services: API (NestJS, Node.js 20+), Frontend (Next.js), Redis (managed). Networking: Public domains for API/Frontend, Redis internal only. Build: Nixpacks auto-detection, Monorepo workspace configuration</snippet>
        <reason>Railway architecture patterns and build process</reason>
      </doc>
      <doc id="doc-5">
        <path>/Users/s0mebody/Desktop/dev/projects/website-scraper-project/docs/stories/story-3.2.md</path>
        <title>Story 3.2 Dev Notes - Graceful Shutdown</title>
        <section>Graceful Shutdown (lines 392-417)</section>
        <snippet>Railway sends SIGTERM 10 seconds before killing process. Implementation: process.on('SIGTERM') with app.close(), bullQueue.close(), prisma.$disconnect(), redis.quit()</snippet>
        <reason>Graceful shutdown implementation for Railway SIGTERM handling</reason>
      </doc>
      <doc id="doc-6">
        <path>/Users/s0mebody/Desktop/dev/projects/website-scraper-project/docs/stories/story-3.2.md</path>
        <title>Common Deployment Issues</title>
        <section>Common Issues (lines 419-440)</section>
        <snippet>Issue 1: Build fails (monorepo dependencies), Issue 2: Env vars not found, Issue 3: CORS errors, Issue 4: Database timeout, Issue 5: Redis connection failed</snippet>
        <reason>Common Railway deployment issues and solutions</reason>
      </doc>
    </docs>
    <code>
      <artifact id="code-1">
        <path>/Users/s0mebody/Desktop/dev/projects/website-scraper-project/apps/api/src/main.ts</path>
        <kind>application</kind>
        <symbol>bootstrap</symbol>
        <lines>1-100</lines>
        <reason>NestJS entry point - needs env validation (AC9) and graceful shutdown (AC13)</reason>
      </artifact>
      <artifact id="code-2">
        <path>/Users/s0mebody/Desktop/dev/projects/website-scraper-project/apps/api/src/health/health.controller.ts</path>
        <kind>controller</kind>
        <symbol>HealthController</symbol>
        <lines>1-50</lines>
        <reason>Health check endpoint for AC7 - returns database and Redis connection status</reason>
      </artifact>
      <artifact id="code-3">
        <path>/Users/s0mebody/Desktop/dev/projects/website-scraper-project/nixpacks.toml</path>
        <kind>config</kind>
        <symbol>nixpacks configuration</symbol>
        <lines>1-15</lines>
        <reason>Railway Nixpacks build config - defines Node.js version, build/start commands (AC6)</reason>
      </artifact>
      <artifact id="code-4">
        <path>/Users/s0mebody/Desktop/dev/projects/website-scraper-project/package.json</path>
        <kind>config</kind>
        <symbol>root package.json</symbol>
        <lines>1-28</lines>
        <reason>Monorepo workspace config - workspaces, build scripts, start:prod command</reason>
      </artifact>
      <artifact id="code-5">
        <path>/Users/s0mebody/Desktop/dev/projects/website-scraper-project/supabase/migrations/*.sql</path>
        <kind>migrations</kind>
        <symbol>Database migrations</symbol>
        <lines>all</lines>
        <reason>All migrations to apply to Supabase production (AC3) - includes classification_settings, 3-tier pipeline tracking</reason>
      </artifact>
    </code>
    <dependencies>
      <node>
        <package name="@nestjs/core" version="^10.0.0">NestJS core framework for API service</package>
        <package name="@nestjs/config" version="^10.0.0">Environment configuration for Railway env vars</package>
        <package name="bullmq" version="^5.0.0">BullMQ job queue for Railway Redis</package>
        <package name="@supabase/supabase-js" version="^2.0.0">Supabase client for production database</package>
        <package name="pino" version="^8.0.0">Pino logger for structured Railway logs</package>
        <package name="ioredis" version="^5.0.0">Redis client for BullMQ Railway Redis</package>
      </node>
      <railway>
        <package name="@railway/cli" version="^4.10.0">Railway CLI for project setup and deployment</package>
      </railway>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint id="c1" type="deployment">
      <title>Zero Manual Configuration</title>
      <description>Railway deployment must require zero manual server configuration - use Railway managed services only. No SSH, no manual installs, no server management</description>
      <source>PRD NFR005</source>
    </constraint>
    <constraint id="c2" type="deployment">
      <title>Auto-Deploy on Git Push</title>
      <description>Railway triggers automatic deployment on git push to main. GitHub webhook must be configured and verified</description>
      <source>AC5</source>
    </constraint>
    <constraint id="c3" type="environment">
      <title>Fail-Fast on Missing Environment Variables</title>
      <description>API validates required env vars at startup, crashes immediately with clear error if missing. Do not start in degraded state</description>
      <source>AC9</source>
    </constraint>
    <constraint id="c4" type="architecture">
      <title>Graceful Shutdown for Data Integrity</title>
      <description>API implements SIGTERM handler to gracefully close BullMQ, database, Redis connections. Current URL processing completes before shutdown</description>
      <source>AC13</source>
    </constraint>
    <constraint id="c5" type="networking">
      <title>CORS Configuration for Production Domains</title>
      <description>API CORS includes Frontend Railway domain. Verify credentials allowed, OPTIONS requests succeed, API requests succeed</description>
      <source>AC12</source>
    </constraint>
    <constraint id="c6" type="database">
      <title>Apply All Migrations to Production</title>
      <description>All supabase/migrations/*.sql files applied to production before API deployment. Verify tables exist and schema matches</description>
      <source>AC3</source>
    </constraint>
    <constraint id="c7" type="security">
      <title>No Secrets in Git</title>
      <description>Never commit secrets to git. All API keys configured via Railway dashboard. Verify .env files gitignored</description>
      <source>Story 3.2 Dev Notes</source>
    </constraint>
    <constraint id="c8" type="monitoring">
      <title>Structured Logging for Railway Dashboard</title>
      <description>API uses Pino logger for structured JSON logging. Logs accessible in Railway with severity levels, timestamps, filterable fields</description>
      <source>AC10</source>
    </constraint>
    <constraint id="c9" type="budget">
      <title>Monthly Operational Cost ≤$150</title>
      <description>Total monthly cost (Railway + Supabase + LLM APIs + ScrapingBee) must not exceed $150. Monitor Railway usage, database size, API costs</description>
      <source>PRD NFR003</source>
    </constraint>
  </constraints>

  <interfaces>
    <interface id="i1">
      <name>GET /health</name>
      <kind>endpoint</kind>
      <signature>GET https://{api-service-url}/health → {status: "ok", timestamp, uptime, database: "connected", redis: "connected"}</signature>
      <path>/apps/api/src/health/health.controller.ts</path>
      <description>Health check endpoint for AC7. Returns 200 with database and Redis connection status</description>
    </interface>
    <interface id="i2">
      <name>Environment Variable Validation</name>
      <kind>function</kind>
      <signature>validateRequiredEnvVars(requiredVars: string[]): void</signature>
      <path>/apps/api/src/main.ts</path>
      <description>Startup validation for AC9. Checks required env vars, throws error if missing. Called before NestJS bootstrap</description>
    </interface>
    <interface id="i3">
      <name>SIGTERM Handler</name>
      <kind>event-handler</kind>
      <signature>process.on('SIGTERM', async () => { await app.close(); await bullQueue.close(); await prisma.$disconnect(); await redis.quit(); process.exit(0); })</signature>
      <path>/apps/api/src/main.ts</path>
      <description>Graceful shutdown for AC13. Handles Railway SIGTERM, closes connections gracefully, allows current URL to complete</description>
    </interface>
    <interface id="i4">
      <name>CORS Configuration</name>
      <kind>configuration</kind>
      <signature>app.enableCors({origin: [process.env.FRONTEND_URL, 'https://{frontend-domain}.up.railway.app'], credentials: true})</signature>
      <path>/apps/api/src/main.ts</path>
      <description>CORS config for AC12. Includes Frontend Railway domain, allows credentials, handles OPTIONS preflight</description>
    </interface>
    <interface id="i5">
      <name>Railway MCP Tools</name>
      <kind>mcp-tools</kind>
      <signature>mcp__railway-mcp-server__*</signature>
      <path>Railway MCP Server</path>
      <description>Railway MCP tools for automated deployment: check-railway-status, create-project-and-link, deploy, generate-domain, get-logs, list-services, list-variables, set-variables</description>
    </interface>
  </interfaces>

  <tests>
    <standards>
      <paragraph>Production deployment uses Railway MCP tools for automated verification and Chrome DevTools MCP for UI validation. Supabase MCP validates database migrations. Manual smoke testing verifies end-to-end functionality. Health check tests verify services connected. CORS tests use browser DevTools Network tab. Graceful shutdown tests trigger Railway redeployment during job processing. Environment validation tests temporarily remove required env var, redeploy, verify crash with clear error. Production validation includes 5-URL smoke test verifying complete 3-tier pipeline</paragraph>
    </standards>
    <locations>
      <location>/docs/deployment-runbook.md (created in Task 11)</location>
      <location>Railway Dashboard → Logs (for log validation)</location>
      <location>Railway Dashboard → Metrics (for resource monitoring)</location>
      <location>Browser DevTools → Network tab (for CORS validation)</location>
    </locations>
    <ideas>
      <idea ac="AC1" priority="high">
        <description>Railway setup: Use mcp__railway-mcp-server__check-railway-status to verify CLI installed → Create project if needed → Link GitHub → Verify webhook in GitHub settings</description>
      </idea>
      <idea ac="AC2" priority="high">
        <description>Services test: Use mcp__railway-mcp-server__list-services to verify API, Redis, Frontend running → Check API has public domain → Check Redis internal only</description>
      </idea>
      <idea ac="AC3" priority="high">
        <description>Migrations test: Use mcp__supabase__list-migrations to verify all applied → Use mcp__supabase__list-tables to verify schema (jobs, results, logs, classification_settings)</description>
      </idea>
      <idea ac="AC4" priority="high">
        <description>Environment vars test: Use mcp__railway-mcp-server__list-variables to verify all required env vars → Verify REDIS_URL references Redis service</description>
      </idea>
      <idea ac="AC6" priority="high">
        <description>Build success: git push → Use mcp__railway-mcp-server__get-logs --logType=build to monitor → Verify "Build succeeded" → Check services running</description>
      </idea>
      <idea ac="AC7" priority="high">
        <description>Health check: Use mcp__railway-mcp-server__get-project-url → curl health endpoint → Verify 200 with {"status":"ok","database":"connected","redis":"connected"}</description>
      </idea>
      <idea ac="AC9" priority="critical">
        <description>Fail-fast test: Remove DATABASE_URL from Railway → Redeploy → Use get-logs to verify crash with "Missing required environment variable: DATABASE_URL" → Restore → Verify starts</description>
      </idea>
      <idea ac="AC12" priority="high">
        <description>CORS test: Use mcp__chrome-devtools__navigate-page to Frontend → Create job → Check Network tab → Verify API requests succeed with CORS headers → No CORS errors in Console</description>
      </idea>
      <idea ac="AC13" priority="critical">
        <description>Graceful shutdown: Create 10-URL job → While processing, trigger redeployment → Monitor logs for "SIGTERM received" → Verify current URL completes → Check "Server closed gracefully" → Verify job resumes after redeploy</description>
      </idea>
      <idea ac="ALL" priority="critical">
        <description>Production smoke test: Open production dashboard → Create 5-URL job → Monitor real-time updates → Verify all 3 layers process → Check results table → Verify no errors in Railway logs</description>
      </idea>
    </ideas>
  </tests>
</story-context>
